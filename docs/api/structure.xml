<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="helper/DT.php" hash="646f1d99e9a2a6d9214b42804c59bd38" package="core\helpers">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.helpers"/>
      <tag line="2" name="author" description="djalmaoliveira@gmail.com"/>
      <tag line="2" name="copyright" description="djalmaoliveira@gmail.com"/>
      <tag line="2" name="license" description=""/>
      <tag line="2" name="link" description="" link=""/>
      <tag line="2" name="since" description="Version 1.0"/>
    </docblock>
    <include line="26" type="Include" package="Default">
      <name/>
    </include>
    <function namespace="global" line="22" package="core\helpers">
      <name>dt_diffsince_</name>
      <full_name>\dt_diffsince_</full_name>
      <docblock line="12">
        <description>Return a textual date/time between two dates $past and $future specified.</description>
        <long-description>&lt;p&gt;$past and $future can be a text like '2010-01-10 15:20:25' or as a seconds like 1263144025.
  This function consider one month with 30 days.
  $detail_level show more detailed text from range 1 to 6.&lt;/p&gt;</long-description>
        <tag line="12" name="param" description="@param mixed $future&#10;  @param integer $detail_level&#10;  @return String" type="mixed" variable="$past">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="22">
        <name>$past</name>
        <default></default>
        <type/>
      </argument>
      <argument line="22">
        <name>$future</name>
        <default></default>
        <type/>
      </argument>
      <argument line="22">
        <name>$detail_level</name>
        <default>0</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="67" package="core\helpers">
      <name>dt_timesince_</name>
      <full_name>\dt_timesince_</full_name>
      <docblock line="60">
        <description>Return a textual date/time passed from $past specified to now.</description>
        <long-description>&lt;p&gt;See dt_diffsince_().&lt;/p&gt;</long-description>
        <tag line="60" name="param" description="@param integer $detail_level&#10;  @return String" type="mixed" variable="$past">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="67">
        <name>$past</name>
        <default></default>
        <type/>
      </argument>
      <argument line="67">
        <name>$detail_level</name>
        <default>0</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <critical line="2" code="50008">No short description for file helper/DT.php</critical>
      <error line="12" code="50015">Argument $future is missing from the Docblock of \dt_diffsince_()</error>
      <error line="12" code="50015">Argument $detail_level is missing from the Docblock of \dt_diffsince_()</error>
      <error line="60" code="50015">Argument $detail_level is missing from the Docblock of \dt_timesince_()</error>
    </parse_markers>
  </file>
  <file path="helper/Form.php" hash="33405c27eb2b999eac2c5808bc540cf2" package="core\helpers">
    <docblock line="3">
      <description></description>
      <long-description></long-description>
      <tag line="3" name="package" description="core.helpers"/>
      <tag line="3" name="author" description="djalmaoliveira@gmail.com"/>
      <tag line="3" name="copyright" description="djalmaoliveira@gmail.com"/>
      <tag line="3" name="license" description=""/>
      <tag line="3" name="link" description="" link=""/>
      <tag line="3" name="since" description="Version 1.0"/>
    </docblock>
    <function namespace="global" line="25" package="core\helpers">
      <name>form_open_</name>
      <full_name>\form_open_</full_name>
      <docblock line="14">
        <description>Form Declaration</description>
        <long-description>&lt;p&gt;Creates the opening portion of the form.&lt;/p&gt;</long-description>
        <tag line="14" name="param" description="the URI segments of the form destination" type="string" variable="$action">
          <type by_reference="false">string</type>
        </tag>
        <tag line="14" name="param" description="a key/value pair of attributes" type="array" variable="$attributes">
          <type by_reference="false">array</type>
        </tag>
        <tag line="14" name="param" description="a key/value pair hidden data" type="array" variable="$hidden">
          <type by_reference="false">array</type>
        </tag>
        <tag line="14" name="param" description="" type="boolean" variable="$return">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="14" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="25">
        <name>$action</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="25">
        <name>$attributes</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="25">
        <name>$hidden</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="25">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="66" package="core\helpers">
      <name>form_open_multipart_</name>
      <full_name>\form_open_multipart_</full_name>
      <docblock line="57">
        <description>Form Declaration - Multipart type</description>
        <long-description>&lt;p&gt;Creates the opening portion of the form, but with "multipart/form-data".&lt;/p&gt;</long-description>
        <tag line="57" name="param" description="the URI segments of the form destination" type="string" variable="$action">
          <type by_reference="false">string</type>
        </tag>
        <tag line="57" name="param" description="a key/value pair of attributes" type="array" variable="$attributes">
          <type by_reference="false">array</type>
        </tag>
        <tag line="57" name="param" description="a key/value pair hidden data" type="array" variable="$hidden">
          <type by_reference="false">array</type>
        </tag>
        <tag line="57" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="66">
        <name>$action</name>
        <default></default>
        <type/>
      </argument>
      <argument line="66">
        <name>$attributes</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="66">
        <name>$hidden</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="66">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="80" package="core\helpers">
      <name>_parse_input_params_</name>
      <full_name>\_parse_input_params_</full_name>
      <argument line="80">
        <name>$params</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="101" package="core\helpers">
      <name>form_input_</name>
      <full_name>\form_input_</full_name>
      <docblock line="88">
        <description>Create a Text Input Field.</description>
        <long-description>&lt;p&gt;Params usage:    (name)
                 (name, value)
                 (name, Array()) =&gt; 'value' will be the 'name' as an item of Array
                 (name, value, extras)
                 (name, Array(), extras) =&gt;  same of above
                 (..., boolean) =&gt; will return a html string of element.&lt;/p&gt;</long-description>
        <tag line="88" name="param" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="88" name="param" description="| Array" type="String" variable="$value">
          <type by_reference="false">String</type>
        </tag>
        <tag line="88" name="param" description="" type="String" variable="$extra">
          <type by_reference="false">String</type>
        </tag>
        <tag line="88" name="return" description="" type="String">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="101">
        <name>$name</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="101">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="101">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="101">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="124" package="core\helpers">
      <name>form_hidden_</name>
      <full_name>\form_hidden_</full_name>
      <docblock line="111">
        <description>Create a Hidden Input Field
Params usage:    (name)
                 (name, value)
                 (name, Array()) =&gt; 'value' will be the 'name' as an item of Array
                 (name, value, extras)
                 (name, Array(), extras) =&gt;  same of above
                 (.</description>
        <long-description>&lt;p&gt;.., boolean) =&gt; will return a html string of element.&lt;/p&gt;</long-description>
        <tag line="111" name="param" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="111" name="param" description="| Array" type="String" variable="$value">
          <type by_reference="false">String</type>
        </tag>
        <tag line="111" name="param" description="" type="String" variable="$extra">
          <type by_reference="false">String</type>
        </tag>
        <tag line="111" name="return" description="" type="String">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="124">
        <name>$name</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="124">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="124">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="124">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="147" package="core\helpers">
      <name>form_password_</name>
      <full_name>\form_password_</full_name>
      <docblock line="134">
        <description>Create a Password Input Field.</description>
        <long-description>&lt;p&gt;Params usage:    (name)
                 (name, value)
                 (name, Array()) =&gt; 'value' will be the 'name' as an item of Array
                 (name, value, extras)
                 (name, Array(), extras) =&gt;  same of above
                 (..., boolean) =&gt; will return a html string of element.&lt;/p&gt;</long-description>
        <tag line="134" name="param" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="134" name="param" description="| Array" type="String" variable="$value">
          <type by_reference="false">String</type>
        </tag>
        <tag line="134" name="param" description="" type="String" variable="$extra">
          <type by_reference="false">String</type>
        </tag>
        <tag line="134" name="return" description="" type="String">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="147">
        <name>$name</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="147">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="147">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="147">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="170" package="core\helpers">
      <name>form_upload_</name>
      <full_name>\form_upload_</full_name>
      <docblock line="160">
        <description>Upload Field</description>
        <long-description>&lt;p&gt;Identical to the input function but adds the "file" type&lt;/p&gt;</long-description>
        <tag line="160" name="param" description="" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="160" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="160" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="160" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="170">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="170">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="170">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="170">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="196" package="core\helpers">
      <name>form_textarea_</name>
      <full_name>\form_textarea_</full_name>
      <docblock line="183">
        <description>Create a TextArea  Field
Params usage:    (name)
                 (name, value)
                 (name, Array()) =&gt; 'value' will be the 'name' as an item of Array
                 (name, value, extras)
                 (name, Array(), extras) =&gt;  same of above
                 (.</description>
        <long-description>&lt;p&gt;.., boolean) =&gt; will return a html string of element.&lt;/p&gt;</long-description>
        <tag line="183" name="param" description="" type="string" variable="$data">
          <type by_reference="false">string</type>
        </tag>
        <tag line="183" name="param" description="| Array" type="String" variable="$value">
          <type by_reference="false">String</type>
        </tag>
        <tag line="183" name="param" description="" type="String" variable="$extra">
          <type by_reference="false">String</type>
        </tag>
        <tag line="183" name="return" description="" type="String">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="196">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="196">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="196">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="196">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="224" package="core\helpers">
      <name>form_multiselect_</name>
      <full_name>\form_multiselect_</full_name>
      <docblock line="215">
        <description>Multi-select menu</description>
        <long-description></long-description>
        <tag line="215" name="param" description="" type="string" variable="$name">
          <type by_reference="false">string</type>
        </tag>
        <tag line="215" name="param" description="" type="array" variable="$options">
          <type by_reference="false">array</type>
        </tag>
        <tag line="215" name="param" description="" type="mixed" variable="$selected">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="215" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="215" name="return" description="" type="\type">
          <type by_reference="false">\type</type>
        </tag>
      </docblock>
      <argument line="224">
        <name>$name</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="224">
        <name>$options</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="224">
        <name>$selected</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="224">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="224">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="249" package="core\helpers">
      <name>form_select_</name>
      <full_name>\form_select_</full_name>
      <docblock line="240">
        <description>Creates a 'select' element form.</description>
        <long-description></long-description>
        <tag line="240" name="param" description="string - Name and Id of element." type="\global\" variable="$name"/>
        <tag line="240" name="param" description="array - key/value of filled data." type="\global\" variable="$options"/>
        <tag line="240" name="param" description="array - value that must be selected." type="\global\" variable="$selected"/>
        <tag line="240" name="param" description="string - others params for element like: class='css_class' onclick='func()'." type="\global\" variable="$extra"/>
        <tag line="240" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="249">
        <name>$name</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="249">
        <name>$options</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="249">
        <name>$selected</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="249">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="249">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="318" package="core\helpers">
      <name>form_checkbox_</name>
      <full_name>\form_checkbox_</full_name>
      <docblock line="309">
        <description>Checkbox Field</description>
        <long-description></long-description>
        <tag line="309" name="param" description="" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="309" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="309" name="param" description="" type="bool" variable="$checked">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="309" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="309" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="318">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="318">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="318">
        <name>$checked</name>
        <default>FALSE</default>
        <type/>
      </argument>
      <argument line="318">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="318">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="367" package="core\helpers">
      <name>form_radio_</name>
      <full_name>\form_radio_</full_name>
      <docblock line="358">
        <description>Radio Button</description>
        <long-description></long-description>
        <tag line="358" name="param" description="" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="358" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="358" name="param" description="" type="bool" variable="$checked">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="358" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="358" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="367">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="367">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="367">
        <name>$checked</name>
        <default>FALSE</default>
        <type/>
      </argument>
      <argument line="367">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="367">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="393" package="core\helpers">
      <name>form_submit_</name>
      <full_name>\form_submit_</full_name>
      <docblock line="385">
        <description>Submit Button</description>
        <long-description></long-description>
        <tag line="385" name="param" description="" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="385" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="385" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="385" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="393">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="393">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="393">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="393">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="416" package="core\helpers">
      <name>form_reset_</name>
      <full_name>\form_reset_</full_name>
      <docblock line="408">
        <description>Reset Button</description>
        <long-description></long-description>
        <tag line="408" name="param" description="" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="408" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="408" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="408" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="416">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="416">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="416">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="416">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="439" package="core\helpers">
      <name>form_button_</name>
      <full_name>\form_button_</full_name>
      <docblock line="431">
        <description>Form Button</description>
        <long-description></long-description>
        <tag line="431" name="param" description="" type="mixed" variable="$data">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="431" name="param" description="" type="string" variable="$content">
          <type by_reference="false">string</type>
        </tag>
        <tag line="431" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="431" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="439">
        <name>$data</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="439">
        <name>$content</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="439">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="439">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="467" package="core\helpers">
      <name>form_label_</name>
      <full_name>\form_label_</full_name>
      <docblock line="459">
        <description>Form Label Tag</description>
        <long-description></long-description>
        <tag line="459" name="param" description="The text to appear onscreen" type="string" variable="$label_text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="459" name="param" description="The id the label applies to" type="string" variable="$id">
          <type by_reference="false">string</type>
        </tag>
        <tag line="459" name="param" description="Additional attributes" type="string" variable="$attributes">
          <type by_reference="false">string</type>
        </tag>
        <tag line="459" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="467">
        <name>$label_text</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="467">
        <name>$id</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="467">
        <name>$attributes</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="467">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="504" package="core\helpers">
      <name>form_fieldset_</name>
      <full_name>\form_fieldset_</full_name>
      <docblock line="495">
        <description>Fieldset Tag</description>
        <long-description>&lt;p&gt;Used to produce&lt;/p&gt;

&lt;p&gt;&amp;lt;&lt;/p&gt;

&lt;p&gt;fieldset&gt;&lt;/p&gt;

&lt;legend&gt;text&lt;/legend&gt;

&lt;p&gt;.  To close fieldset
use fieldset_close()&lt;/p&gt;</long-description>
        <tag line="495" name="param" description="The legend text" type="string" variable="$legend_text">
          <type by_reference="false">string</type>
        </tag>
        <tag line="495" name="param" description="Additional attributes" type="string" variable="$attributes">
          <type by_reference="false">string</type>
        </tag>
        <tag line="495" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="504">
        <name>$legend_text</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="504">
        <name>$attributes</name>
        <default>array()</default>
        <type/>
      </argument>
      <argument line="504">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="532" package="core\helpers">
      <name>form_fieldset_close_</name>
      <full_name>\form_fieldset_close_</full_name>
      <docblock line="526">
        <description>Fieldset Close Tag</description>
        <long-description></long-description>
        <tag line="526" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="526" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="532">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="532">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="550" package="core\helpers">
      <name>form_close_</name>
      <full_name>\form_close_</full_name>
      <docblock line="544">
        <description>Form Close Tag</description>
        <long-description></long-description>
        <tag line="544" name="param" description="" type="string" variable="$extra">
          <type by_reference="false">string</type>
        </tag>
        <tag line="544" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="550">
        <name>$extra</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="550">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="569" package="core\helpers">
      <name>form_prep_</name>
      <full_name>\form_prep_</full_name>
      <docblock line="562">
        <description>Form Prep</description>
        <long-description>&lt;p&gt;Formats text so that it can be safely placed in a form field in the event it has HTML tags.&lt;/p&gt;</long-description>
        <tag line="562" name="param" description="" type="string" variable="$str">
          <type by_reference="false">string</type>
        </tag>
        <tag line="562" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="569">
        <name>$str</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="569">
        <name>$field_name</name>
        <default>''</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="623" package="core\helpers">
      <name>form_set_value_</name>
      <full_name>\form_set_value_</full_name>
      <docblock line="614">
        <description>Form Value</description>
        <long-description>&lt;p&gt;Grabs a value from the POST array for the specified field so you can
re-populate an input field or textarea.  If Form Validation
is active it retrieves the info from the validation class&lt;/p&gt;</long-description>
        <tag line="614" name="param" description="" type="string" variable="$field">
          <type by_reference="false">string</type>
        </tag>
        <tag line="614" name="return" description="" type="mixed">
          <type by_reference="false">mixed</type>
        </tag>
      </docblock>
      <argument line="623">
        <name>$field</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="623">
        <name>$default</name>
        <default>''</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="651" package="core\helpers">
      <name>form_set_select_</name>
      <full_name>\form_set_select_</full_name>
      <docblock line="641">
        <description>Set Select</description>
        <long-description>&lt;p&gt;Let's you set the selected value of a &lt;select&gt; menu via data in the POST array.
If Form Validation is active it retrieves the info from the validation class&lt;/p&gt;</long-description>
        <tag line="641" name="param" description="" type="string" variable="$field">
          <type by_reference="false">string</type>
        </tag>
        <tag line="641" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="641" name="param" description="" type="bool" variable="$default">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="641" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="651">
        <name>$field</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="651">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="651">
        <name>$default</name>
        <default>FALSE</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="702" package="core\helpers">
      <name>form_set_checkbox_</name>
      <full_name>\form_set_checkbox_</full_name>
      <docblock line="692">
        <description>Set Checkbox</description>
        <long-description>&lt;p&gt;Let's you set the selected value of a checkbox via the value in the POST array.
If Form Validation is active it retrieves the info from the validation class&lt;/p&gt;</long-description>
        <tag line="692" name="param" description="" type="string" variable="$field">
          <type by_reference="false">string</type>
        </tag>
        <tag line="692" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="692" name="param" description="" type="bool" variable="$default">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="692" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="702">
        <name>$field</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="702">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="702">
        <name>$default</name>
        <default>FALSE</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="753" package="core\helpers">
      <name>form_set_radio_</name>
      <full_name>\form_set_radio_</full_name>
      <docblock line="743">
        <description>Set Radio</description>
        <long-description>&lt;p&gt;Let's you set the selected value of a radio field via info in the POST array.
If Form Validation is active it retrieves the info from the validation class&lt;/p&gt;</long-description>
        <tag line="743" name="param" description="" type="string" variable="$field">
          <type by_reference="false">string</type>
        </tag>
        <tag line="743" name="param" description="" type="string" variable="$value">
          <type by_reference="false">string</type>
        </tag>
        <tag line="743" name="param" description="" type="bool" variable="$default">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="743" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="753">
        <name>$field</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="753">
        <name>$value</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="753">
        <name>$default</name>
        <default>FALSE</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="804" package="core\helpers">
      <name>_parse_form_attributes_</name>
      <full_name>\_parse_form_attributes_</full_name>
      <docblock line="794">
        <description>Parse the form attributes</description>
        <long-description>&lt;p&gt;Helper function used by some of the form helpers&lt;/p&gt;</long-description>
        <tag line="794" name="access" description="private"/>
        <tag line="794" name="param" description="" type="array" variable="$attributes">
          <type by_reference="false">array</type>
        </tag>
        <tag line="794" name="param" description="" type="array" variable="$default">
          <type by_reference="false">array</type>
        </tag>
        <tag line="794" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="804">
        <name>$attributes</name>
        <default></default>
        <type/>
      </argument>
      <argument line="804">
        <name>$default</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="851" package="core\helpers">
      <name>_attributes_to_string_</name>
      <full_name>\_attributes_to_string_</full_name>
      <docblock line="841">
        <description>Attributes To String</description>
        <long-description>&lt;p&gt;Helper function used by some of the form helpers&lt;/p&gt;</long-description>
        <tag line="841" name="access" description="private"/>
        <tag line="841" name="param" description="" type="mixed" variable="$attributes">
          <type by_reference="false">mixed</type>
        </tag>
        <tag line="841" name="param" description="" type="bool" variable="$formtag">
          <type by_reference="false">bool</type>
        </tag>
        <tag line="841" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="851">
        <name>$attributes</name>
        <default></default>
        <type/>
      </argument>
      <argument line="851">
        <name>$formtag</name>
        <default>FALSE</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <critical line="3" code="50008">No short description for file helper/Form.php</critical>
      <error line="57" code="50015">Argument $return is missing from the Docblock of \form_open_multipart_()</error>
      <error line="80" code="50009">No DocBlock was found for function \_parse_input_params_()</error>
      <error line="88" code="50015">Argument $return is missing from the Docblock of \form_input_()</error>
      <error line="111" code="50015">Argument $return is missing from the Docblock of \form_hidden_()</error>
      <error line="134" code="50015">Argument $return is missing from the Docblock of \form_password_()</error>
      <error line="160" code="50015">Argument $return is missing from the Docblock of \form_upload_()</error>
      <error line="183" code="50015">Argument $return is missing from the Docblock of \form_textarea_()</error>
      <error line="215" code="50015">Argument $return is missing from the Docblock of \form_multiselect_()</error>
      <error line="240" code="50015">Argument $return is missing from the Docblock of \form_select_()</error>
      <error line="309" code="50015">Argument $return is missing from the Docblock of \form_checkbox_()</error>
      <error line="358" code="50015">Argument $return is missing from the Docblock of \form_radio_()</error>
      <error line="385" code="50015">Argument $return is missing from the Docblock of \form_submit_()</error>
      <error line="408" code="50015">Argument $return is missing from the Docblock of \form_reset_()</error>
      <error line="431" code="50015">Argument $return is missing from the Docblock of \form_button_()</error>
      <error line="459" code="50015">Argument $return is missing from the Docblock of \form_label_()</error>
      <error line="495" code="50015">Argument $return is missing from the Docblock of \form_fieldset_()</error>
      <error line="526" code="50015">Argument $return is missing from the Docblock of \form_fieldset_close_()</error>
      <error line="544" code="50015">Argument $return is missing from the Docblock of \form_close_()</error>
      <error line="562" code="50015">Argument $field_name is missing from the Docblock of \form_prep_()</error>
      <error line="614" code="50015">Argument $default is missing from the Docblock of \form_set_value_()</error>
    </parse_markers>
  </file>
  <file path="helper/FS.php" hash="3ff8e31ffce2d163bf3cde3c6975109a" package="core\helpers">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.helpers"/>
      <tag line="2" name="author" description="djalmaoliveira@gmail.com"/>
      <tag line="2" name="copyright" description="djalmaoliveira@gmail.com"/>
      <tag line="2" name="license" description=""/>
      <tag line="2" name="link" description="" link=""/>
      <tag line="2" name="since" description="Version 1.0"/>
    </docblock>
    <function namespace="global" line="25" package="core\helpers">
      <name>fs_relative_path_</name>
      <full_name>\fs_relative_path_</full_name>
      <docblock line="13">
        <description>Return a relative path from $dest_path to $source_path specified.</description>
        <long-description>&lt;p&gt;The path returned is relative a first parent directory from $dest_path.
Example: $dest_path = '/home/user/myfolder/dest_path';
         $source_path = '/home/user/oldfolder/source';
The path will consider that you are on '/home/user/myfolder' and will return '../oldfolder/source'.&lt;/p&gt;</long-description>
        <tag line="13" name="param" description="" type="string" variable="$source_path">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="param" description="" type="string" variable="$dest_path">
          <type by_reference="false">string</type>
        </tag>
        <tag line="13" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="25">
        <name>$source_path</name>
        <default></default>
        <type/>
      </argument>
      <argument line="25">
        <name>$dest_path</name>
        <default></default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="63" package="core\helpers">
      <name>fs_scan_</name>
      <full_name>\fs_scan_</full_name>
      <docblock line="53">
        <description>Scan the specified $path using callback user function for each file found.</description>
        <long-description>&lt;p&gt;The $func accept two parameters: $dir and $file.
  The return type of $func must be Array or String.
  If $recursive is true, then will scan recursively the $path.&lt;/p&gt;</long-description>
        <tag line="53" name="param" description="@param Function $func&#10;  @param boolean $recursive&#10;  @return mixed - Result of callback function" type="String" variable="$path">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="63">
        <name>$path</name>
        <default></default>
        <type/>
      </argument>
      <argument line="63">
        <name>$func</name>
        <default></default>
        <type/>
      </argument>
      <argument line="63">
        <name>$recursive</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <critical line="2" code="50008">No short description for file helper/FS.php</critical>
      <error line="53" code="50015">Argument $func is missing from the Docblock of \fs_scan_()</error>
      <error line="53" code="50015">Argument $recursive is missing from the Docblock of \fs_scan_()</error>
    </parse_markers>
  </file>
  <file path="helper/Url.php" hash="fb72faa09971b1dc02feb6891714cb67" package="core\helpers">
    <docblock line="3">
      <description></description>
      <long-description></long-description>
      <tag line="3" name="package" description="core.helpers"/>
      <tag line="3" name="author" description="djalmaoliveira@gmail.com"/>
      <tag line="3" name="copyright" description="djalmaoliveira@gmail.com"/>
      <tag line="3" name="license" description=""/>
      <tag line="3" name="link" description="" link=""/>
      <tag line="3" name="since" description="Version 1.0"/>
    </docblock>
    <function namespace="global" line="25" package="core\helpers">
      <name>url_to_</name>
      <full_name>\url_to_</full_name>
      <docblock line="16">
        <description>Create relative url from APP_URL.</description>
        <long-description></long-description>
        <tag line="16" name="access" description="public"/>
        <tag line="16" name="param" description="" type="string" variable="$relative_url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="16" name="param" description="" type="boolean" variable="$return">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="16" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="25">
        <name>$relative_url</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="25">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="47" package="core\helpers">
      <name>url_current_</name>
      <full_name>\url_current_</full_name>
      <docblock line="37">
        <description>Current URL</description>
        <long-description>&lt;p&gt;Returns the current URL requested.&lt;/p&gt;</long-description>
        <tag line="37" name="access" description="public"/>
        <tag line="37" name="param" description="" type="string" variable="$relative_url">
          <type by_reference="false">string</type>
        </tag>
        <tag line="37" name="param" description="" type="boolean" variable="$return">
          <type by_reference="false">boolean</type>
        </tag>
        <tag line="37" name="return" description="" type="string">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="47">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="62" package="core\helpers">
      <name>url_asset_</name>
      <full_name>\url_asset_</full_name>
      <docblock line="56">
        <description>Returns a URL to app asset.</description>
        <long-description>&lt;p&gt;@param string $relative_url&lt;/p&gt;</long-description>
        <tag line="56" name="param" description="@return string" type="boolean" variable="$return">
          <type by_reference="false">boolean</type>
        </tag>
      </docblock>
      <argument line="62">
        <name>$relative_url</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="62">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="79" package="core\helpers">
      <name>url_module_name_asset_</name>
      <full_name>\url_module_name_asset_</full_name>
      <docblock line="73">
        <description>Returns current module name that will be used by others helper functions that use it.</description>
        <long-description>&lt;p&gt;If specified a name, will set up with it.&lt;/p&gt;</long-description>
        <tag line="73" name="param" description="@return string" type="string" variable="$moduleName">
          <type by_reference="false">string</type>
        </tag>
      </docblock>
      <argument line="79">
        <name>$moduleName</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="99" package="core\helpers">
      <name>url_module_asset_</name>
      <full_name>\url_module_asset_</full_name>
      <docblock line="93">
        <description>Returns a URL to module asset.</description>
        <long-description>&lt;p&gt;@param string $relative_url&lt;/p&gt;</long-description>
        <tag line="93" name="param" description="@return string" type="boolean" variable="$return">
          <type by_reference="false">boolean</type>
        </tag>
      </docblock>
      <argument line="99">
        <name>$relative_url</name>
        <default>''</default>
        <type/>
      </argument>
      <argument line="99">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="123" package="core\helpers">
      <name>url_clean_</name>
      <full_name>\url_clean_</full_name>
      <docblock line="111">
        <description>Return a clean specified URL.</description>
        <long-description>&lt;p&gt;Change spaces and others charactes to $separator by default '-'.
Usage:  url_clean_('http://a b c'); // printcleaned url&amp;lt;br/&gt;
        url_clean_('http://a b c', '&lt;em&gt;'); // print cleaned url with '&lt;/em&gt;' separator&amp;lt;br/&gt;
        url_clean_('http://a b c', true);// return cleaned url&amp;lt;br/&gt;
        url_clean_('http://a b c', '&lt;em&gt;', true);// return cleaned url with '&lt;/em&gt;' separator&lt;/p&gt;</long-description>
        <tag line="111" name="param" description="@param String $separator&#10;  @param boolean $return&#10;  @return String" type="String" variable="$url">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="123">
        <name>$url</name>
        <default></default>
        <type/>
      </argument>
      <argument line="123">
        <name>$separator</name>
        <default>"-"</default>
        <type/>
      </argument>
      <argument line="123">
        <name>$return</name>
        <default>false</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <critical line="3" code="50008">No short description for file helper/Url.php</critical>
      <error line="37" code="50014">Name of argument $return does not match with the DocBlock's name $relative_url in \url_current_()</error>
      <notice line="37" code="50013">Parameter $relative_url could not be found in \url_current_()</notice>
      <error line="56" code="50014">Name of argument $relative_url does not match with the DocBlock's name $return in \url_asset_()</error>
      <error line="56" code="50015">Argument $return is missing from the Docblock of \url_asset_()</error>
      <error line="93" code="50014">Name of argument $relative_url does not match with the DocBlock's name $return in \url_module_asset_()</error>
      <error line="93" code="50015">Argument $return is missing from the Docblock of \url_module_asset_()</error>
      <error line="111" code="50015">Argument $separator is missing from the Docblock of \url_clean_()</error>
      <error line="111" code="50015">Argument $return is missing from the Docblock of \url_clean_()</error>
    </parse_markers>
  </file>
  <file path="helper/HTML.php" hash="ecb3ba7345998aa1feecb2209c977f6a" package="core\helpers">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.helpers"/>
      <tag line="2" name="author" description="djalmaoliveira@gmail.com"/>
      <tag line="2" name="copyright" description="djalmaoliveira@gmail.com"/>
      <tag line="2" name="license" description="license.txt"/>
      <tag line="2" name="link" description="" link=""/>
      <tag line="2" name="since" description="Version 1.0"/>
    </docblock>
    <function namespace="global" line="22" package="core\helpers">
      <name>html_header_</name>
      <full_name>\html_header_</full_name>
      <docblock line="12">
        <description>Set or print Html tags for external CSS and JS files included in 'head' tag.</description>
        <long-description>&lt;p&gt;Usage:  html_header_('css', 'http://abc.com/somefile.css'); // external assets
          html_header_('css', '/mycss/my.css'); // absolute path from root path (i.e. www.domain.com/mycss/my.css)
          html_header_('css', 'my.css'); // relative to default /css folder (i.e. www.domain.com/css/my.css)
          html_header_(); // print tags to use among html head tags.&lt;/p&gt;</long-description>
        <tag line="12" name="param" description="- 'css' or 'js'&#10;  @param String $url - Relative url to assets folder or external url starting with http:// or https://.&#10;  @return String - Html tags" type="String" variable="$type">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="22">
        <name>$type</name>
        <default>null</default>
        <type/>
      </argument>
      <argument line="22">
        <name>$url</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="57" package="core\helpers">
      <name>html_meta_</name>
      <full_name>\html_meta_</full_name>
      <docblock line="50">
        <description>Set or print html meta tags with some data, that should be included in 'head' tag.</description>
        <long-description>&lt;p&gt;Usage:  html_meta_( Array('name'=&gt;'author', 'content'=&gt;'Liber framework') ); // set a meta author content, used inside template files
          html_meta_(); // print tags to use among html head tags.&lt;/p&gt;</long-description>
        <tag line="50" name="param" description="@return String - Html meta tags" type="Array" variable="$aData">
          <type by_reference="false">Array</type>
        </tag>
      </docblock>
      <argument line="57">
        <name>$aData</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="78" package="core\helpers">
      <name>html_title_</name>
      <full_name>\html_title_</full_name>
      <docblock line="71">
        <description>Set or get the text to html title tag.</description>
        <long-description>&lt;p&gt;Usage:  html_title_( 'title of page' ); // set title of page, used inside template files
          html_title_(); // get title&lt;/p&gt;</long-description>
        <tag line="71" name="param" description="@return String" type="String" variable="$title">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="78">
        <name>$title</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <function namespace="global" line="93" package="core\helpers">
      <name>html_script_</name>
      <full_name>\html_script_</full_name>
      <docblock line="88">
        <description>Set or return script String to use on head tags.</description>
        <long-description>&lt;p&gt;@param String $script&lt;/p&gt;</long-description>
        <tag line="88" name="return" description="" type="String">
          <type by_reference="false">String</type>
        </tag>
      </docblock>
      <argument line="93">
        <name>$script</name>
        <default>null</default>
        <type/>
      </argument>
    </function>
    <parse_markers>
      <critical line="2" code="50008">No short description for file helper/HTML.php</critical>
      <error line="12" code="50015">Argument $url is missing from the Docblock of \html_header_()</error>
      <error line="88" code="50015">Argument $script is missing from the Docblock of \html_script_()</error>
    </parse_markers>
  </file>
  <file path="Liber.php" hash="ed04eefe5b87dec5a8c56b07ba404f73" package="Default">
    <docblock line="2">
      <description>Main framework class file.</description>
      <long-description>&lt;p&gt;Copyright (c) 2010, 2011 Djalma Oliveira (djalmaoliveira@gmail.com)
All rights reserved.&lt;/p&gt;</long-description>
      <tag line="2" name="license" description="license.txt"/>
    </docblock>
    <include line="218" type="Include" package="Default">
      <name/>
    </include>
    <include line="293" type="Include" package="Default">
      <name/>
    </include>
    <include line="422" type="Include" package="Default">
      <name/>
    </include>
    <function namespace="global" line="241" package="Default">
      <name>catchError</name>
      <full_name>\catchError</full_name>
    </function>
    <class final="false" abstract="false" namespace="global" line="38" package="core">
      <extends/>
      <name>Liber</name>
      <full_name>\Liber</full_name>
      <docblock line="9">
        <description>Liber is a main class of framework.</description>
        <long-description>&lt;p&gt;How to setup configuration params:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Liber::conf('APP_MODE', 'PROD');&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and to get params:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Liber::conf('APP_MODE');&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are many params that can be used:&lt;/p&gt;

&lt;pre&gt;
BASE_PATH        -&gt;  Internal path to Framework;
APP_PATH         -&gt;  Internal path to application dir;
APP_URL          -&gt;  URL to access aplication (i.e. http://www.domain.com);
APP_ROOT         -&gt;  Application path (i.e. /www/app/public_html/);
APP_MODE         -&gt;  Values: 'DEV' for development (default) and 'PROD' for production mode;
DB_LAYER         -&gt;  Class name used to manipulate the access to database, using BasicDb class by default;
TEMPLATE_ENGINE  -&gt;  Class name used to manipulate a Template system, using TemplateEngine class by default;
ASSETS_DIR       -&gt;  Default name to assets dir into web public access, APP_ROOT/assets/ by default;
LOG_PATH         -&gt;  Default name to log dir where is stored log files,  APP_PATH/log/ by default;
CACHE_PATH       -&gt;  Default name to cache dir where is stored cached files, APP_PATH/cache/ by default;
PAGE_NOT_FOUND   -&gt;  Application Controller name of default for page not found,  'NotFoundController' by default;
SYS_ERROR        -&gt;  Application Controller name of default for system error message,  'SysErrorController' by default;
LANG             -&gt;  Application language, used to some system messages. See BASE_PATH/i18n. 'en' by default;
&lt;/pre&gt;

&lt;p&gt;By default all &lt;i&gt;paths&lt;/i&gt; used, must have a final slash '/', like "/my/log/dir/".&lt;/p&gt;</long-description>
        <tag line="9" name="author" description="Djalma Oliveira (djalmaoliveira@gmail.com)"/>
        <tag line="9" name="package" description="core"/>
        <tag line="9" name="version" description="2.0.1"/>
        <tag line="9" name="since" description="1.0"/>
      </docblock>
      <constant namespace="global" line="43" package="core">
        <name>VERSION</name>
        <full_name>VERSION</full_name>
        <value>'2.0.0'</value>
        <docblock line="40">
          <description>Framework version</description>
          <long-description></long-description>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="52" namespace="global" package="Default">
        <name>$aConfig</name>
        <default>array('BASE_PATH' =&gt; '', 'APP_PATH' =&gt; '', 'APP_URL' =&gt; '', 'APP_ROOT' =&gt; '', 'APP_MODE' =&gt; 'DEV', 'DB_LAYER' =&gt; 'BasicDb', 'TEMPLATE_ENGINE' =&gt; 'TemplateEngine', 'ASSETS_DIR' =&gt; 'assets', 'LOG_PATH' =&gt; 'log/', 'CACHE_PATH' =&gt; 'cache/', 'PAGE_NOT_FOUND' =&gt; 'NotFoundController', 'SYS_ERROR' =&gt; 'SysErrorController', 'LANG' =&gt; 'en')</default>
        <docblock line="46">
          <description>Store all configurations of application.</description>
          <long-description>&lt;p&gt;Format: $config['config'] = Array - Basic configurations, index are the same properties of Object.
          $config['route'] = Array - Configuration about how controller/action/module are invoke.&lt;/p&gt;</long-description>
          <tag line="46" name="var" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="133" namespace="global" package="Default">
        <name>$aRoute</name>
        <default>array()</default>
        <docblock line="68">
          <description>The routing system.</description>
          <long-description>&lt;p&gt;In this context a 'segment' of URI is a one of many parts separated by '/'.&lt;/p&gt;

&lt;p&gt;In example '/my/route/test' there are three segments.&lt;/p&gt;

&lt;pre&gt;
 The route processing obey the follow sequence jumping to the next when not found:
     1º - Search for direct route; (no URI params)
     2º - Search for previous segment direct route; (no URI params)
     3º - Search if exist a method in controller of route '/';
     4º - Search for controller name;
     5º - Search for named params in route;
     6º - Load Not Found Controller;

 Route format:   $route[URI][METHOD] = Array('ControllerName', 'Action', 'ModuleName');
                 $route[URI][METHOD] = '/othet/route';
                 METHOD can be: *, get, post, put, delete;
                 When to use *, the others for the same URI will be skipped;
 uri             =&gt; the relative path of resource like: /article/firstArticle ;
 ControllerName  =&gt; the file name (without extension) of controller inside 'controller/' dir;
 Action          =&gt; the method name of controller;
                    if not specified, means that the action will be a method from Controller ;
 ModuleName      =&gt; the module name inside 'APP_PATH/module/' dir;
                    it means that the controller will be called from this module;
 &lt;/pre&gt;

&lt;p&gt;Route examples:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     // Module 'Admin' has controller 'UserAdmin' with method 'index'
     $route['/admin/user']['*']   = Array('UserAdmin', 'index', 'Admin');

     // Controller 'Home' has 'index' method (implicit)
     $route['/about']['*']        = Array('Home');

     // Controller 'Blog' has 'index' method
     $route['/blog']['*']         = Array('Blog', 'index');
 &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are a optional behaviour when an additional segments in a URI are put as argument to the method called, example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $route['/about']['*']        = Array('Home');
     // if called URI '/about/John'
     // the part URI (segment) 'John' will be passed as argument to method when the programmer can catch this value
     function about($name) {
         echo $name;
     }

 &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this case method param $name is optional, if you need the value inside of called method.&lt;/p&gt;

&lt;p&gt;Avoid this routes (don't works or works the wrong way):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   /blog/:id::name:   -&gt; params together;
   /blog/post/:post:  -&gt; get all, but depends of declared order;
   /blog/post/a:post: -&gt; the previous route get this pattern;
   /blog/a:id:-:month:  -&gt; allowed only one param per segment;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Take care with routes that have same segments in URI, like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;     $route['/']['*']          = Array('Main');
     $route['/buy/cpu']['*']   = Array('Buy');

     // If controller 'Main' has 'buy' method, this route won't work as you think
     $route['/buy/:component:']['*']  = Array('Components', 'buy');
 &lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="68" name="var" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="139" namespace="global" package="Default">
        <name>$aDbConfig</name>
        <default>array('DEV' =&gt; array(), 'PROD' =&gt; array())</default>
        <docblock line="135">
          <description>Database configuration</description>
          <long-description>&lt;p&gt;@var Array&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="145" namespace="global" package="Default">
        <name>$_db</name>
        <default></default>
        <docblock line="141">
          <description>Database layer instance</description>
          <long-description>&lt;p&gt;@var Object&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="151" namespace="global" package="Default">
        <name>$_cache</name>
        <default></default>
        <docblock line="147">
          <description>Cache instance</description>
          <long-description>&lt;p&gt;@var Object&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="true" visibility="protected" line="157" namespace="global" package="Default">
        <name>$_controller</name>
        <default></default>
        <docblock line="153">
          <description>Current controller instance</description>
          <long-description>&lt;p&gt;@var Controller&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="163" package="core">
        <name>db</name>
        <full_name>db</full_name>
        <docblock line="159">
          <description>Returns a database object instance.</description>
          <long-description>&lt;p&gt;@return BasicDb based class,  the database singleton, auto create if the singleton has not been created yet.&lt;/p&gt;</long-description>
        </docblock>
        <argument line="163">
          <name>$app_mode</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="181" package="core">
        <name>log</name>
        <full_name>log</full_name>
        <docblock line="177">
          <description>Returns a log object instance;</description>
          <long-description>&lt;p&gt;@return object Log&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="195" package="core">
        <name>cache</name>
        <full_name>cache</full_name>
        <docblock line="190">
          <description>Returns a cache instance.</description>
          <long-description>&lt;p&gt;@param String $cacheType Cache type: file.&lt;/p&gt;</long-description>
          <tag line="190" name="return" description="Object." type="\Cache">
            <type by_reference="false">\Cache</type>
          </tag>
        </docblock>
        <argument line="195">
          <name>$class</name>
          <default>'FileCache'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="207" package="core">
        <name>run</name>
        <full_name>run</full_name>
        <docblock line="204">
          <description>Start and execute application.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="217" package="core">
        <name>loadApp</name>
        <full_name>loadApp</full_name>
        <docblock line="213">
          <description>Set and prepare the enviroment to a Liber application.</description>
          <long-description>&lt;p&gt;@param String $path&lt;/p&gt;</long-description>
        </docblock>
        <argument line="217">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="261" package="core">
        <name>conf</name>
        <full_name>conf</full_name>
        <docblock line="254">
          <description>Set/add config params.</description>
          <long-description>&lt;p&gt;Can be added new params if necessary.&lt;/p&gt;</long-description>
          <tag line="254" name="param" description="-&gt; param name&#10;  @param String $v -&gt; param value&#10;  @return mixed" type="String" variable="$p">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="261">
          <name>$p</name>
          <default></default>
          <type/>
        </argument>
        <argument line="261">
          <name>$v</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="281" package="core">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="273">
          <description>Imports the definition of class(es) and tries to create an object/a list of objects from the class.</description>
          <long-description></long-description>
          <tag line="273" name="param" description="Name of the class to be imported, or Array of classNames to load." type="String|Array" variable="$className">
            <type by_reference="false">String</type>
            <type by_reference="false">Array</type>
          </tag>
          <tag line="273" name="param" description="Path to the class file" type="String" variable="$path">
            <type by_reference="false">String</type>
          </tag>
          <tag line="273" name="param" description="Determined whether to create object(s) of the class" type="bool" variable="$createObj">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="273" name="return" description="returns true|false by default. If $createObj is TRUE, it creates and return the Object of the class name passed in, if $classname is a Array it will return an Array of objects created in same order." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="281">
          <name>$className</name>
          <default></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="281">
          <name>$createObj</name>
          <default>FALSE</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="312" package="core">
        <name>prepareLoad</name>
        <full_name>prepareLoad</full_name>
        <docblock line="306">
          <description>Detect and return the current configuration about which context should be loaded.</description>
          <long-description>&lt;p&gt;@param String $context  - Module Name&lt;/p&gt;</long-description>
          <tag line="306" name="param" description="- if it must return a object&#10;  @return Array" type="boolean" variable="$create">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="312">
          <name>$context</name>
          <default></default>
          <type/>
        </argument>
        <argument line="312">
          <name>$create</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="334" package="core">
        <name>loadContext</name>
        <full_name>loadContext</full_name>
        <docblock line="326">
          <description>Import files of context.</description>
          <long-description>&lt;p&gt;Context can be a Module path or APP_PATH (default).&lt;/p&gt;</long-description>
          <tag line="326" name="param" description="@param  mixed $contextORcreateObj  - name of module or boolean&#10;  @param  boolean $createObj&#10;  @return mixed - object or boolean" type="String" variable="$className">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="334">
          <name>$className</name>
          <default></default>
          <type/>
        </argument>
        <argument line="334">
          <name>$contextORcreateObj</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="334">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="354" package="core">
        <name>loadController</name>
        <full_name>loadController</full_name>
        <docblock line="347">
          <description>Imports the definition of Controller class.</description>
          <long-description>&lt;p&gt;Class file is located at &lt;b&gt;APP_PATH/controller/&lt;/b&gt; or &lt;b&gt;APP_PATH/ModuleName/controller/&lt;/b&gt;&lt;/p&gt;</long-description>
          <tag line="347" name="param" description="@param  String|boolean  $context  - name of module or boolean&#10;  @param  boolean $createObj&#10;  @return mixed - object or boolean" type="String" variable="$cName">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="354">
          <name>$cName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="354">
          <name>$context</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="354">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="375" package="core">
        <name>loadModel</name>
        <full_name>loadModel</full_name>
        <docblock line="368">
          <description>Imports the definition of Model class.</description>
          <long-description>&lt;p&gt;Class file is located at &lt;b&gt;APP_PATH/model/&lt;/b&gt; or &lt;b&gt;APP_PATH/ModuleName/model/b&gt;&lt;/p&gt;</long-description>
          <tag line="368" name="param" description="@param  String|boolean $context  - name of module or boolean&#10;  @param  boolean $createObj&#10;  @return mixed - object or boolean" type="String" variable="$modelName">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="375">
          <name>$modelName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="375">
          <name>$context</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="375">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="394" package="core">
        <name>loadClass</name>
        <full_name>loadClass</full_name>
        <docblock line="387">
          <description>Imports the definition of one Class.</description>
          <long-description>&lt;p&gt;Class file is located at &lt;b&gt;BASE_PATH/class/&lt;/b&gt; or &lt;b&gt;$context/class/&lt;/b&gt;&lt;/p&gt;</long-description>
          <tag line="387" name="param" description="@param  String|boolean $context  - name of module or boolean&#10;  @param  boolean $createObj&#10;  @return mixed - object or boolean" type="String" variable="$className">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="394">
          <name>$className</name>
          <default></default>
          <type/>
        </argument>
        <argument line="394">
          <name>$context</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="394">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="407" package="core">
        <name>loadHelper</name>
        <full_name>loadHelper</full_name>
        <docblock line="401">
          <description>Imports the definition of functions Helper file.</description>
          <long-description>&lt;p&gt;File is located at &lt;b&gt;BASE_PATH/helper/&lt;/b&gt;  or &lt;b&gt;$context/helper/&lt;/b&gt;&lt;/p&gt;</long-description>
          <tag line="401" name="param" description="@param  String|boolean $context  - name of module or boolean&#10;  @return boolean" type="String" variable="$helperName">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="407">
          <name>$helperName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="407">
          <name>$context</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="439" package="core">
        <name>loadPlugin</name>
        <full_name>loadPlugin</full_name>
        <docblock line="432">
          <description>Imports the definition of Plugin class.</description>
          <long-description>&lt;p&gt;Class file is located at &lt;b&gt;BASE_PATH/plugin/&lt;/b&gt;  or &lt;b&gt;$context/plugin/&lt;/b&gt;&lt;/p&gt;</long-description>
          <tag line="432" name="param" description="@param  String|boolean $context  - name of module or boolean&#10;  @param  boolean $createObj&#10;  @return mixed - object or boolean" type="String" variable="$pluginName">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="439">
          <name>$pluginName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="439">
          <name>$context</name>
          <default>false</default>
          <type/>
        </argument>
        <argument line="439">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="452" package="core">
        <name>getParams</name>
        <full_name>getParams</full_name>
        <docblock line="446">
          <description>Get named params from uri.</description>
          <long-description>&lt;p&gt;@param Array $rule&lt;/p&gt;</long-description>
          <tag line="446" name="param" description="@return Array - Array('paramName' =&gt; 'value')" type="Array" variable="$data">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="452">
          <name>$rule</name>
          <default></default>
          <type/>
        </argument>
        <argument line="452">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="499" package="core">
        <name>redirect</name>
        <full_name>redirect</full_name>
        <docblock line="491">
          <description>Redirect client to another URL.</description>
          <long-description>&lt;p&gt;Detect if Liber_URL_REWRITE was set, your WEB Server should be capable to set this param to retrieve from $_SERVER variable.
  If this param don't exist, all urls will be used with 'index.php/'.&lt;/p&gt;</long-description>
          <tag line="491" name="param" description="@param boolean $return  - if must return a url String instead of redirect client&#10;  @return String" type="String" variable="$url">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="499">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
        <argument line="499">
          <name>$return</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="520" package="core">
        <name>parseRouteParams</name>
        <full_name>parseRouteParams</full_name>
        <docblock line="514">
          <description>Search for configured route and params, returning it.</description>
          <long-description>&lt;p&gt;@param Array  $aRoute&lt;/p&gt;</long-description>
          <tag line="514" name="param" description="@return boolean" type="String" variable="$uri">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="520">
          <name>$aRoute</name>
          <default></default>
          <type/>
        </argument>
        <argument line="520">
          <name>$uri</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="543" package="core">
        <name>getRouteConf</name>
        <full_name>getRouteConf</full_name>
        <docblock line="537">
          <description>Detect sort of configuration from route.</description>
          <long-description>&lt;p&gt;If Array return it, if String, it might be a re-routing or redirect to&lt;/p&gt;</long-description>
          <tag line="537" name="param" description="@return Array" type="mixed" variable="$conf">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="543">
          <name>$conf</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="574" package="core">
        <name>getRouteMethod</name>
        <full_name>getRouteMethod</full_name>
        <docblock line="569">
          <description>Detects and returns a route options from a specified route, among methods os *.</description>
          <long-description>&lt;p&gt;@param String $route&lt;/p&gt;</long-description>
          <tag line="569" name="return" description="- Array | String or false if don't find." type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="574">
          <name>$route</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="587" package="core">
        <name>processController</name>
        <full_name>processController</full_name>
        <docblock line="579">
          <description>Process the controller associated with the processed route.</description>
          <long-description></long-description>
          <tag line="579" name="param" description="" type="string" variable="$controller">
            <type by_reference="false">string</type>
          </tag>
          <tag line="579" name="param" description="" type="string" variable="$method">
            <type by_reference="false">string</type>
          </tag>
          <tag line="579" name="param" description="" type="string" variable="$module">
            <type by_reference="false">string</type>
          </tag>
          <tag line="579" name="param" description="" type="Array" variable="$params">
            <type by_reference="false">Array</type>
          </tag>
          <tag line="579" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="587">
          <name>$controller</name>
          <default></default>
          <type/>
        </argument>
        <argument line="587">
          <name>$method</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="587">
          <name>$module</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="587">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="606" package="core">
        <name>processRoute</name>
        <full_name>processRoute</full_name>
        <docblock line="603">
          <description>Process route, match and create related controller or redirect to default controller if don't match.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="655" package="core">
        <name>controller</name>
        <full_name>controller</full_name>
        <docblock line="651">
          <description>Return current Controller instance.</description>
          <long-description>&lt;p&gt;@return Controller&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="667" package="Default">
      <extends/>
      <name>Controller</name>
      <full_name>\Controller</full_name>
      <docblock line="663">
        <description>Class that manipulates Controllers, its creation can be relative a module.</description>
        <long-description>&lt;p&gt;All controllers must extends it and have at least the 'index' method.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="673" namespace="global" package="Default">
        <name>$module</name>
        <default></default>
        <docblock line="669">
          <description>Module name</description>
          <long-description>&lt;p&gt;@var String&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="679" namespace="global" package="Default">
        <name>$params</name>
        <default></default>
        <docblock line="675">
          <description>Params detected from uri.</description>
          <long-description>&lt;p&gt;@var Array&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="685" namespace="global" package="Default">
        <name>$_view</name>
        <default></default>
        <docblock line="681">
          <description>View instance</description>
          <long-description>&lt;p&gt;@var View&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="694" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="688">
          <description>Constructor.</description>
          <long-description>&lt;p&gt;@param Array $args
  $args values are:   ['module'] = 'module name' - empty for application controller
                      ['params'] = Array() - values of detected named params from route&lt;/p&gt;</long-description>
        </docblock>
        <argument line="694">
          <name>$args</name>
          <default>array('module' =&gt; '', 'params' =&gt; array())</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="706" package="Default">
        <name>loadModel</name>
        <full_name>loadModel</full_name>
        <docblock line="700">
          <description>Load model from application or module if was instanced with it.</description>
          <long-description>&lt;p&gt;@param String $modelName   - Model name&lt;/p&gt;</long-description>
          <tag line="700" name="param" description="- if must create a object&#10;  @return mixed - Model object or boolean" type="String|boolean" variable="$createObj">
            <type by_reference="false">String</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="706">
          <name>$modelName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="706">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="717" package="Default">
        <name>loadClass</name>
        <full_name>loadClass</full_name>
        <docblock line="711">
          <description>Load Class from application or module if was instanced with it.</description>
          <long-description>&lt;p&gt;@param String $className   - Model name&lt;/p&gt;</long-description>
          <tag line="711" name="param" description="boolean - if must create a object&#10;  @return mixed - Class object or boolean" type="String|boolean" variable="$createObj">
            <type by_reference="false">String</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="717">
          <name>$className</name>
          <default></default>
          <type/>
        </argument>
        <argument line="717">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="728" package="Default">
        <name>loadHelper</name>
        <full_name>loadHelper</full_name>
        <docblock line="722">
          <description>Load helper from application or module if was instanced with it.</description>
          <long-description>&lt;p&gt;@param String $helperName   - Helper name&lt;/p&gt;</long-description>
          <tag line="722" name="param" description="boolean - if must create a object&#10;  @return boolean" type="String|boolean" variable="$createObj">
            <type by_reference="false">String</type>
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="728">
          <name>$helperName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="739" package="Default">
        <name>loadPlugin</name>
        <full_name>loadPlugin</full_name>
        <docblock line="733">
          <description>Load plugin from application or module if was instanced with it.</description>
          <long-description>&lt;p&gt;@param String $pluginName - Plugin name&lt;/p&gt;</long-description>
          <tag line="733" name="param" description="- if must create a object&#10;  @return mixed - Plugin object or boolean" type="boolean" variable="$createObj">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="739">
          <name>$pluginName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="739">
          <name>$createObj</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="749" package="Default">
        <name>view</name>
        <full_name>view</full_name>
        <docblock line="744">
          <description>Get instance of View class.</description>
          <long-description>&lt;p&gt;@param String $layout_once  - Name of layout that this call will use&lt;/p&gt;</long-description>
          <tag line="744" name="return" description="object" type="\View">
            <type by_reference="false">\View</type>
          </tag>
        </docblock>
        <argument line="749">
          <name>$layout_once</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="763" package="Default">
        <name>params</name>
        <full_name>params</full_name>
        <docblock line="758">
          <description>Get named or unamed params from uri.</description>
          <long-description>&lt;p&gt;@param String $name  - Param name&lt;/p&gt;</long-description>
          <tag line="758" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="763">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="775" package="Default">
        <name>__call</name>
        <full_name>__call</full_name>
        <docblock line="771">
          <description>Called when there aren't a requested action method in controller.</description>
          <long-description>&lt;p&gt;@param String $action - Action name called&lt;/p&gt;</long-description>
        </docblock>
        <argument line="775">
          <name>$action</name>
          <default></default>
          <type/>
        </argument>
        <argument line="775">
          <name>$args</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="241" code="50009">No DocBlock was found for function \catchError()</error>
      <error line="159" code="50015">Argument $app_mode is missing from the Docblock of db()</error>
      <error line="190" code="50015">Argument $class is missing from the Docblock of cache()</error>
      <error line="213" code="50015">Argument $path is missing from the Docblock of loadApp()</error>
      <error line="254" code="50015">Argument $v is missing from the Docblock of conf()</error>
      <error line="306" code="50014">Name of argument $context does not match with the DocBlock's name $create in prepareLoad()</error>
      <error line="306" code="50015">Argument $create is missing from the Docblock of prepareLoad()</error>
      <error line="326" code="50015">Argument $contextORcreateObj is missing from the Docblock of loadContext()</error>
      <error line="326" code="50015">Argument $createObj is missing from the Docblock of loadContext()</error>
      <error line="347" code="50015">Argument $context is missing from the Docblock of loadController()</error>
      <error line="347" code="50015">Argument $createObj is missing from the Docblock of loadController()</error>
      <error line="368" code="50015">Argument $context is missing from the Docblock of loadModel()</error>
      <error line="368" code="50015">Argument $createObj is missing from the Docblock of loadModel()</error>
      <error line="387" code="50015">Argument $context is missing from the Docblock of loadClass()</error>
      <error line="387" code="50015">Argument $createObj is missing from the Docblock of loadClass()</error>
      <error line="401" code="50015">Argument $context is missing from the Docblock of loadHelper()</error>
      <error line="432" code="50015">Argument $context is missing from the Docblock of loadPlugin()</error>
      <error line="432" code="50015">Argument $createObj is missing from the Docblock of loadPlugin()</error>
      <error line="446" code="50014">Name of argument $rule does not match with the DocBlock's name $data in getParams()</error>
      <error line="446" code="50015">Argument $data is missing from the Docblock of getParams()</error>
      <error line="491" code="50015">Argument $return is missing from the Docblock of redirect()</error>
      <error line="514" code="50014">Name of argument $aRoute does not match with the DocBlock's name $uri in parseRouteParams()</error>
      <error line="514" code="50015">Argument $uri is missing from the Docblock of parseRouteParams()</error>
      <error line="569" code="50015">Argument $route is missing from the Docblock of getRouteMethod()</error>
      <error line="688" code="50015">Argument $args is missing from the Docblock of __construct()</error>
      <error line="700" code="50014">Name of argument $modelName does not match with the DocBlock's name $createObj in loadModel()</error>
      <error line="700" code="50015">Argument $createObj is missing from the Docblock of loadModel()</error>
      <error line="711" code="50014">Name of argument $className does not match with the DocBlock's name $createObj in loadClass()</error>
      <error line="711" code="50015">Argument $createObj is missing from the Docblock of loadClass()</error>
      <error line="722" code="50014">Name of argument $helperName does not match with the DocBlock's name $createObj in loadHelper()</error>
      <notice line="722" code="50013">Parameter $createObj could not be found in loadHelper()</notice>
      <error line="733" code="50014">Name of argument $pluginName does not match with the DocBlock's name $createObj in loadPlugin()</error>
      <error line="733" code="50015">Argument $createObj is missing from the Docblock of loadPlugin()</error>
      <error line="744" code="50015">Argument $layout_once is missing from the Docblock of view()</error>
      <error line="758" code="50015">Argument $name is missing from the Docblock of params()</error>
      <error line="771" code="50015">Argument $action is missing from the Docblock of __call()</error>
      <error line="771" code="50015">Argument $args is missing from the Docblock of __call()</error>
    </parse_markers>
  </file>
  <file path="i18n/helper/DT.en.php" hash="dc38609e30606c829fb7bf3fd2cbfce6" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file i18n/helper/DT.en.php</error>
    </parse_markers>
  </file>
  <file path="i18n/helper/DT.pt_br.php" hash="73cc7d1fa16198ed7e7fce645d91fe50" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file i18n/helper/DT.pt_br.php</error>
    </parse_markers>
  </file>
  <file path="i18n/class/FileUpdate.en.php" hash="2bafcaa436157d7bac6ec5f69c645517" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file i18n/class/FileUpdate.en.php</error>
    </parse_markers>
  </file>
  <file path="i18n/class/Validation.en.php" hash="018ed3784503e1ccb10554c12704e026" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file i18n/class/Validation.en.php</error>
    </parse_markers>
  </file>
  <file path="i18n/class/Validation.pt_br.php" hash="56269ab1a87eb2bb26869c2ffff17709" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file i18n/class/Validation.pt_br.php</error>
    </parse_markers>
  </file>
  <file path="i18n/class/FileUpdate.pt_br.php" hash="dabbc18e517b78c26f0dfe20e7d84207" package="Default">
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file i18n/class/FileUpdate.pt_br.php</error>
    </parse_markers>
  </file>
  <file path="cache/FileCache.php" hash="16c549a73183413d3cf8dd039d5ed336" package="cache">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="cache"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="13" package="Default">
      <extends/>
      <name>FileCache</name>
      <full_name>\FileCache</full_name>
      <docblock line="7">
        <description>Default class of Caching features.</description>
        <long-description></long-description>
        <tag line="7" name="author" description="Djalma Oliveira &lt;djalmaoliveira@gmail.com&gt;"/>
        <tag line="7" name="copyright" description="Copyright &amp;copy; 2010 Djalma Oliveira"/>
        <tag line="7" name="license" description="license.txt"/>
      </docblock>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$context</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$contextPath</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="17">
          <name>$context</name>
          <default>'default'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="Default">
        <name>context</name>
        <full_name>context</full_name>
        <docblock line="22">
          <description>Set or get context of instance.</description>
          <long-description>&lt;p&gt;The context is a named folder where cache data will be stored.
  Return current context if not specified or a new if to.&lt;/p&gt;</long-description>
          <tag line="22" name="param" description="@return String" type="String" variable="$context">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$context</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="42">
          <description>Get stored cache by $id specified.</description>
          <long-description>&lt;p&gt;Return String of stored cache or false if cache have expired time or not exist.&lt;/p&gt;</long-description>
          <tag line="42" name="param" description="@return String/False" type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Default">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="60">
          <description>Put $data on cache by $id specified.</description>
          <long-description>&lt;p&gt;You can set a $expire time of this cached $id, use seconds to.&lt;/p&gt;</long-description>
          <tag line="60" name="param" description="@param String $data&#10;  @param Integer $expire&#10;  @return String - File name of stored content." type="mixed" variable="$id">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$id</name>
          <default></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$data</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="68">
          <name>$expire</name>
          <default>3600</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="85" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="81">
          <description>Clear all stored cache from current context or a specified $id only.</description>
          <long-description>&lt;p&gt;@param mixed $id&lt;/p&gt;</long-description>
        </docblock>
        <argument line="85">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file cache/FileCache.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $context</error>
      <error line="15" code="50018">No DocBlock was found for property $contextPath</error>
      <error line="17" code="50010">No DocBlock was found for method __construct()</error>
      <error line="60" code="50015">Argument $data is missing from the Docblock of put()</error>
      <error line="60" code="50015">Argument $expire is missing from the Docblock of put()</error>
      <error line="81" code="50015">Argument $id is missing from the Docblock of clear()</error>
    </parse_markers>
  </file>
  <file path="class/FileUpdate.php" hash="a3fef9c3701ba8a94f790803fd4b271a" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <include line="148" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>FileUpdate</name>
      <full_name>\FileUpdate</full_name>
      <docblock line="7">
        <description>Class used for create a update file and to use it for updates remote an application.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="16" namespace="global" package="Default">
        <name>$updateData</name>
        <default>array('workingDir' =&gt; '', 'add' =&gt; array(), 'ignore' =&gt; array(), 'delete' =&gt; array())</default>
        <docblock line="12">
          <description>Store update data.</description>
          <long-description>&lt;p&gt;@var $updateData&lt;/p&gt;</long-description>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="Default">
        <name>workingDir</name>
        <full_name>workingDir</full_name>
        <docblock line="24">
          <description>Set or Get the working dir, it will be used to make relative path from files added.</description>
          <long-description>&lt;p&gt;@param String $dirPath&lt;/p&gt;</long-description>
          <tag line="24" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$dirPath</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="48" package="Default">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="42">
          <description>Add a path that can be a file or directory, returning the status of operation.</description>
          <long-description>&lt;p&gt;@param String $path&lt;/p&gt;</long-description>
          <tag line="42" name="param" description="- only used for directory&#10;  @return boolean" type="boolean" variable="$recursive">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="48">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="48">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="81" package="Default">
        <name>ignore</name>
        <full_name>ignore</full_name>
        <docblock line="77">
          <description>Path to ignore, that can be a file or directory.</description>
          <long-description>&lt;p&gt;@param String $filePath&lt;/p&gt;</long-description>
        </docblock>
        <argument line="81">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="91" package="Default">
        <name>delete</name>
        <full_name>delete</full_name>
        <docblock line="86">
          <description>Path to delete, that can be a file or directory.</description>
          <long-description>&lt;p&gt;@param String $filePath&lt;/p&gt;</long-description>
          <tag line="86" name="param" description="- only used for directory" type="boolean" variable="$recursive">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="91">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="91">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="103" package="Default">
        <name>_ignore</name>
        <full_name>_ignore</full_name>
        <docblock line="98">
          <description>Search in ignore list if there is a path that match with $path specified.</description>
          <long-description>&lt;p&gt;@param String $path&lt;/p&gt;</long-description>
          <tag line="98" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>loadUpdate</name>
        <full_name>loadUpdate</full_name>
        <docblock line="112">
          <description>Load an update file in current instance, returning the state of operation.</description>
          <long-description>&lt;p&gt;@param String $filePath&lt;/p&gt;</long-description>
          <tag line="112" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$filePath</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="129" package="Default">
        <name>writeUpdate</name>
        <full_name>writeUpdate</full_name>
        <docblock line="124">
          <description>Write the current update data to file, returning the state of operation.</description>
          <long-description>&lt;p&gt;@param String $filePath&lt;/p&gt;</long-description>
          <tag line="124" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="129">
          <name>$filePath</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="143" package="Default">
        <name>processUpdate</name>
        <full_name>processUpdate</full_name>
        <docblock line="138">
          <description>Execute the update using current update data, returning the state of operation.</description>
          <long-description>&lt;p&gt;Return true if everything is ok, otherwise Array of files and its problems.&lt;/p&gt;</long-description>
          <tag line="138" name="return" description="" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="248" package="Default">
        <name>files</name>
        <full_name>files</full_name>
        <docblock line="244">
          <description>Return an array of current added, ignored and deleted files.</description>
          <long-description>&lt;p&gt;@return Array&lt;/p&gt;</long-description>
        </docblock>
        <argument line="248">
          <name>$type</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/FileUpdate.php</critical>
      <error line="24" code="50015">Argument $dirPath is missing from the Docblock of workingDir()</error>
      <error line="42" code="50014">Name of argument $path does not match with the DocBlock's name $recursive in add()</error>
      <error line="42" code="50015">Argument $recursive is missing from the Docblock of add()</error>
      <error line="77" code="50015">Argument $path is missing from the Docblock of ignore()</error>
      <error line="86" code="50014">Name of argument $path does not match with the DocBlock's name $recursive in delete()</error>
      <error line="86" code="50015">Argument $recursive is missing from the Docblock of delete()</error>
      <error line="98" code="50015">Argument $path is missing from the Docblock of _ignore()</error>
      <error line="112" code="50015">Argument $filePath is missing from the Docblock of loadUpdate()</error>
      <error line="124" code="50015">Argument $filePath is missing from the Docblock of writeUpdate()</error>
      <error line="244" code="50015">Argument $type is missing from the Docblock of files()</error>
    </parse_markers>
  </file>
  <file path="class/Setup.php" hash="4fddb7b0fa8550616dba6b16271bc2d9" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends/>
      <name>Setup</name>
      <full_name>\Setup</full_name>
      <docblock line="6">
        <description>Class that manipulates some jobs, to aid set up application.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="11" namespace="global" package="Default">
        <name>$app_root</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="12" namespace="global" package="Default">
        <name>$assets_dir</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="13" namespace="global" package="Default">
        <name>$app_path</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="15" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="15">
          <name>$aParams</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="34" package="Default">
        <name>publishAssets</name>
        <full_name>publishAssets</full_name>
        <docblock line="28">
          <description>Make public, all assets dir on application, including modules.</description>
          <long-description>&lt;p&gt;Publish assets dir to APP_ROOT/ASSETS_DIR, and modules assets to APP_ROOT/ASSETS_DIR/MODULE_NAME.
  After it, these dirs going to have public access by web.&lt;/p&gt;</long-description>
          <tag line="28" name="return" description="- of messages about something wrong found." type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Default">
        <name>prepareAssetDir</name>
        <full_name>prepareAssetDir</full_name>
        <docblock line="63">
          <description>Create a assets dir on www.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="79" package="Default">
        <name>publishContextAsset</name>
        <full_name>publishContextAsset</full_name>
        <docblock line="74">
          <description>Publish asset dir from context that can be application dir, module dir or layout dir,  and link to a specified name on www.</description>
          <long-description>&lt;p&gt;@param String $context_path&lt;/p&gt;</long-description>
          <tag line="74" name="param" description="" type="String" variable="$to_asset_dir">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="79">
          <name>$context_path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="79">
          <name>$to_asset_dir</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="100" package="Default">
        <name>publishAsset</name>
        <full_name>publishAsset</full_name>
        <docblock line="96">
          <description>Publish application assets by default or module assets if specified.</description>
          <long-description>&lt;p&gt;@param String $moduleName&lt;/p&gt;</long-description>
        </docblock>
        <argument line="100">
          <name>$moduleName</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="114" package="Default">
        <name>createLayout</name>
        <full_name>createLayout</full_name>
        <docblock line="109">
          <description>Create a layout structure based on current application.</description>
          <long-description>&lt;p&gt;@param String $name  - Layout name&lt;/p&gt;</long-description>
          <tag line="109" name="param" description="- Array of modules names or true to create all modules" type="mixed" variable="$modules">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="114">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="114">
          <name>$modules</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="Default">
        <name>publishLayoutAsset</name>
        <full_name>publishLayoutAsset</full_name>
        <docblock line="133">
          <description>Publish layout assets from specified name, from application or module.</description>
          <long-description>&lt;p&gt;In $layout can be specified a complete path to layout that not follow the convention.&lt;/p&gt;</long-description>
          <tag line="133" name="param" description="@param String $moduleName" type="String" variable="$layout">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$layout</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$moduleName</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="166" package="Default">
        <name>_listRealFiles</name>
        <full_name>_listRealFiles</full_name>
        <docblock line="159">
          <description>Return Array of files found using Array of regex patterns as a filter from specified path.</description>
          <long-description>&lt;p&gt;@param String $path&lt;/p&gt;</long-description>
          <tag line="159" name="param" description="@param boolean $recursive&#10;  @return Array" type="Array" variable="$pattern">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="166">
          <name>$pattern</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="166">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="211" package="Default">
        <name>_duplicateLayout</name>
        <full_name>_duplicateLayout</full_name>
        <docblock line="206">
          <description>Duplicate dirs and files for Layout.</description>
          <long-description>&lt;p&gt;@param String $source_path&lt;/p&gt;</long-description>
          <tag line="206" name="param" description="" type="String" variable="$dest_path">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="211">
          <name>$source_path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="211">
          <name>$dest_path</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="224" package="Default">
        <name>_duplicateDir</name>
        <full_name>_duplicateDir</full_name>
        <docblock line="219">
          <description>Make a copy from $source_path to $dest_path, only .</description>
          <long-description>&lt;p&gt;@param String $source_path&lt;/p&gt;</long-description>
          <tag line="219" name="param" description="" type="String" variable="$dest_path">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="224">
          <name>$source_path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="224">
          <name>$dest_path</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Setup.php</critical>
      <error line="11" code="50018">No DocBlock was found for property $app_root</error>
      <error line="12" code="50018">No DocBlock was found for property $assets_dir</error>
      <error line="13" code="50018">No DocBlock was found for property $app_path</error>
      <error line="15" code="50010">No DocBlock was found for method __construct()</error>
      <error line="74" code="50014">Name of argument $context_path does not match with the DocBlock's name $to_asset_dir in publishContextAsset()</error>
      <error line="74" code="50015">Argument $to_asset_dir is missing from the Docblock of publishContextAsset()</error>
      <error line="96" code="50015">Argument $moduleName is missing from the Docblock of publishAsset()</error>
      <error line="109" code="50014">Name of argument $name does not match with the DocBlock's name $modules in createLayout()</error>
      <error line="109" code="50015">Argument $modules is missing from the Docblock of createLayout()</error>
      <error line="133" code="50015">Argument $moduleName is missing from the Docblock of publishLayoutAsset()</error>
      <error line="159" code="50014">Name of argument $path does not match with the DocBlock's name $pattern in _listRealFiles()</error>
      <error line="159" code="50015">Argument $pattern is missing from the Docblock of _listRealFiles()</error>
      <error line="159" code="50015">Argument $recursive is missing from the Docblock of _listRealFiles()</error>
      <error line="206" code="50014">Name of argument $source_path does not match with the DocBlock's name $dest_path in _duplicateLayout()</error>
      <error line="206" code="50015">Argument $dest_path is missing from the Docblock of _duplicateLayout()</error>
      <error line="219" code="50014">Name of argument $source_path does not match with the DocBlock's name $dest_path in _duplicateDir()</error>
      <error line="219" code="50015">Argument $dest_path is missing from the Docblock of _duplicateDir()</error>
    </parse_markers>
  </file>
  <file path="class/Minify_CSS_Compressor.php" hash="131a96ca3f46723cc8360bb331947938" package="Minify">
    <docblock line="2">
      <description>Class Minify_CSS_Compressor</description>
      <long-description></long-description>
      <tag line="2" name="package" description="Minify"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="21" package="Minify">
      <extends/>
      <name>Minify_CSS_Compressor</name>
      <full_name>\Minify_CSS_Compressor</full_name>
      <docblock line="7">
        <description>Compress CSS</description>
        <long-description>&lt;p&gt;This is a heavy regex-based removal of whitespace, unnecessary
comments and tokens, and some CSS value minimization, where practical.
Many steps have been taken to avoid breaking comment-based hacks,
including the ie5/mac filter (and its inversion), but expect tricky
hacks involving comment tokens in 'content' value strings to break
minimization badly. A test suite is available.&lt;/p&gt;</long-description>
        <tag line="7" name="package" description="Minify"/>
        <tag line="7" name="author" description="Stephen Clay &lt;steve@mrclay.org&gt;"/>
        <tag line="7" name="author" description="http://code.google.com/u/1stvamp/ (Issue 64 patch)"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="41" namespace="global" package="Default">
        <name>$_options</name>
        <default>null</default>
        <docblock line="38">
          <description></description>
          <long-description></long-description>
          <tag line="38" name="var" description="options" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="48" namespace="global" package="Default">
        <name>$_inHack</name>
        <default>false</default>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag line="43" name="var" description="Are we &quot;in&quot; a hack? I.e. are some browsers targetted until the next comment?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="32" package="Minify">
        <name>process</name>
        <full_name>process</full_name>
        <docblock line="23">
          <description>Minify a CSS string</description>
          <long-description></long-description>
          <tag line="23" name="param" description="" type="string" variable="$css">
            <type by_reference="false">string</type>
          </tag>
          <tag line="23" name="param" description="(currently ignored)" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="23" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$css</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="58" package="Minify">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="51">
          <description>Constructor</description>
          <long-description></long-description>
          <tag line="51" name="param" description="(currently ignored)" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="51" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="58">
          <name>$options</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="69" package="Minify">
        <name>_process</name>
        <full_name>_process</full_name>
        <docblock line="62">
          <description>Minify a CSS string</description>
          <long-description></long-description>
          <tag line="62" name="param" description="" type="string" variable="$css">
            <type by_reference="false">string</type>
          </tag>
          <tag line="62" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="69">
          <name>$css</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="164" package="Minify">
        <name>_selectorsCB</name>
        <full_name>_selectorsCB</full_name>
        <docblock line="157">
          <description>Replace what looks like a set of selectors</description>
          <long-description></long-description>
          <tag line="157" name="param" description="regex matches" type="array" variable="$m">
            <type by_reference="false">array</type>
          </tag>
          <tag line="157" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="164">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="177" package="Minify">
        <name>_commentCB</name>
        <full_name>_commentCB</full_name>
        <docblock line="170">
          <description>Process a comment and return a replacement</description>
          <long-description></long-description>
          <tag line="170" name="param" description="regex matches" type="array" variable="$m">
            <type by_reference="false">array</type>
          </tag>
          <tag line="170" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="177">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="237" package="Minify">
        <name>_fontFamilyCB</name>
        <full_name>_fontFamilyCB</full_name>
        <docblock line="230">
          <description>Process a font-family listing and return a replacement</description>
          <long-description></long-description>
          <tag line="230" name="param" description="regex matches" type="array" variable="$m">
            <type by_reference="false">array</type>
          </tag>
          <tag line="230" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="237">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="class/SiteMap.php" hash="b7fe2e563783262bf34275084ad0fdb9" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="11" package="Default">
      <extends/>
      <name>SiteMap</name>
      <full_name>\SiteMap</full_name>
      <docblock line="7">
        <description>Generic class create sitemaps to Search Engine.</description>
        <long-description>&lt;p&gt;Protocol at http://sitemaps.org/&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="16" namespace="global" package="Default">
        <name>$aUrls</name>
        <default>array()</default>
        <docblock line="12">
          <description>Store list of urls.</description>
          <long-description></long-description>
          <tag line="12" name="var" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>url</name>
        <full_name>url</full_name>
        <docblock line="19">
          <description>Set or get urls.</description>
          <long-description>&lt;p&gt;Usage:  url( Array('loc'=&gt;'http://someurl.com') ) to set one url;
        url( Array(Array('loc'=&gt;'http://someurl.com'), Array('loc'=&gt;'http://someurl2.com')) ) put a set of urls replacing current set;
        url() to return Array of urls currently stored;&lt;/p&gt;</long-description>
          <tag line="19" name="param" description="" type="Array" variable="$arr">
            <type by_reference="false">Array</type>
          </tag>
          <tag line="19" name="return" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$arr</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>xml</name>
        <full_name>xml</full_name>
        <docblock line="39">
          <description>Return XML content.</description>
          <long-description></long-description>
          <tag line="39" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="52" package="Default">
        <name>buildSiteMap</name>
        <full_name>buildSiteMap</full_name>
        <docblock line="47">
          <description>Create a XML content of stores $this-&gt;aUrls
Return NULL if doesn't exist any URL</description>
          <long-description></long-description>
          <tag line="47" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/SiteMap.php</critical>
    </parse_markers>
  </file>
  <file path="class/Funky.php" hash="eb344462e38b657ffb741ba4e802a8ec" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="13" package="Default">
      <extends/>
      <name>Funky</name>
      <full_name>\Funky</full_name>
      <docblock line="7">
        <description>Class that manage funky cache files.</description>
        <long-description>&lt;p&gt;Funky cache simply write a raw html content to a file to improve speed access.
  This files used to be put on a public url path and auto-created when it's missing, using NotFoundController for example.
Some methods can be overrided by a extended class to adapt to current features of application.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="19" namespace="global" package="Default">
        <name>$urlPattern</name>
        <default></default>
        <docblock line="14">
          <description>Store the pattern String that is used to match against a URL.</description>
          <long-description>&lt;p&gt;Usefull to match if a random URL is a funky cache directory.&lt;/p&gt;</long-description>
          <tag line="14" name="var" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="21" package="Default">
        <name>__contruct</name>
        <full_name>__contruct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="30" package="Default">
        <name>matchUrl</name>
        <full_name>matchUrl</full_name>
        <docblock line="25">
          <description>Try match a $url specified against 'urlPattern', returning true or false.</description>
          <long-description>&lt;p&gt;@param String $url&lt;/p&gt;</long-description>
          <tag line="25" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="30">
          <name>$url</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="41" package="Default">
        <name>url</name>
        <full_name>url</full_name>
        <docblock line="34">
          <description>This method is used for return a public URL to cached page.</description>
          <long-description>&lt;p&gt;With it you can create your own rules how your cache should work.
  Work together with create() method.&lt;/p&gt;</long-description>
          <tag line="34" name="param" description="@return mixed" type="mixed" variable="$file">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="41">
          <name>$file</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="45">
          <description>Create a cache data from $aData specified.</description>
          <long-description>&lt;p&gt;With it you can create your own rules how your cache should be created.
  Work together with url() method.&lt;/p&gt;</long-description>
          <tag line="45" name="param" description="@return mixed" type="mixed" variable="$aData">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$aData</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="63" package="Default">
        <name>put</name>
        <full_name>put</full_name>
        <docblock line="56">
          <description>Put a raw file $data to a specified $path.</description>
          <long-description>&lt;p&gt;Return a boolean value indicating if it did.&lt;/p&gt;</long-description>
          <tag line="56" name="param" description="@param String $data&#10;  @return boolean" type="String" variable="$path">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="63">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="63">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="77" package="Default">
        <name>clean</name>
        <full_name>clean</full_name>
        <docblock line="72">
          <description>Clean a specified $path, recursively or not.</description>
          <long-description>&lt;p&gt;@param String  $path&lt;/p&gt;</long-description>
          <tag line="72" name="param" description="" type="boolean" variable="$recursive">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="77">
          <name>$path</name>
          <default></default>
          <type/>
        </argument>
        <argument line="77">
          <name>$recursive</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Funky.php</critical>
      <error line="21" code="50010">No DocBlock was found for method __contruct()</error>
      <error line="25" code="50015">Argument $url is missing from the Docblock of matchUrl()</error>
      <error line="56" code="50015">Argument $data is missing from the Docblock of put()</error>
      <error line="72" code="50014">Name of argument $path does not match with the DocBlock's name $recursive in clean()</error>
      <error line="72" code="50015">Argument $recursive is missing from the Docblock of clean()</error>
    </parse_markers>
  </file>
  <file path="class/View.php" hash="7cde5c84ce991d9108cf25f5583c0c1e" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="9" package="Default">
      <extends/>
      <name>View</name>
      <full_name>\View</full_name>
      <docblock line="6">
        <description>Class that manipulates html output and html template engine loads.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="11" namespace="global" package="Default">
        <name>$module</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="12" namespace="global" package="Default">
        <name>$module_path</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="13" namespace="global" package="Default">
        <name>$_engine</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$_template</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$cache_expires</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="16" namespace="global" package="Default">
        <name>$expireTime</name>
        <default>3600</default>
      </property>
      <property final="false" static="false" visibility="public" line="17" namespace="global" package="Default">
        <name>$layout</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="private" line="18" namespace="global" package="Default">
        <name>$_layout_once</name>
        <default>''</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="20">
          <name>$params</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="53" package="Default">
        <name>current</name>
        <full_name>current</full_name>
        <docblock line="49">
          <description>Return current setting from instance.</description>
          <long-description>&lt;p&gt;@return mixed&lt;/p&gt;</long-description>
        </docblock>
        <argument line="53">
          <name>$param</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="76" package="Default">
        <name>cache</name>
        <full_name>cache</full_name>
        <docblock line="62">
          <description>Set the cache expires.</description>
          <long-description>&lt;p&gt;Uses:
  -&gt;cache();          // return cache expire time in seconds
  -&gt;cache(true);      // enable caching to default value 3600s
  -&gt;cache(false);     // disable caching
  -&gt;cache('filename.html'); // return current Array data about the specified file
  -&gt;cache('filename.html', true); // set caching to default value for specified file
  -&gt;cache('filename.html', false); // disable caching for specified file
  -&gt;cache('filename.html', 2000); // set caching with 2000s to specific file&lt;/p&gt;</long-description>
          <tag line="62" name="param" description="- see above&#10;  @param mixed $arg2  - see above&#10;  @return mixed" type="mixed" variable="$arg1">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="110" package="Default">
        <name>setLayoutOnce</name>
        <full_name>setLayoutOnce</full_name>
        <docblock line="106">
          <description>Set layout that must be used once time.</description>
          <long-description>&lt;p&gt;@param String $layout&lt;/p&gt;</long-description>
        </docblock>
        <argument line="110">
          <name>$layout</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="122" package="Default">
        <name>path</name>
        <full_name>path</full_name>
        <docblock line="115">
          <description>Return the path of view file specified related from current module.</description>
          <long-description>&lt;p&gt;If specified complete path return it.
  If layout is defined, verify if file within it exists.&lt;/p&gt;</long-description>
          <tag line="115" name="param" description="@return String" type="String" variable="$fileName">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="122">
          <name>$fileName</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="148" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="141">
          <description>Call 'load' method from template engine instance.</description>
          <long-description>&lt;p&gt;@param  String $fileName&lt;/p&gt;</long-description>
          <tag line="141" name="param" description="@param  boolean $output&#10;  @return String - if output is true" type="Array" variable="$data">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="148">
          <name>$fileName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="148">
          <name>$data</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="148">
          <name>$output</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="181" package="Default">
        <name>template</name>
        <full_name>template</full_name>
        <docblock line="177">
          <description>Return a GlobalTemplate instance base on current view context.</description>
          <long-description>&lt;p&gt;@return GlobaTemplate&lt;/p&gt;</long-description>
        </docblock>
        <argument line="181">
          <name>$module</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="195" package="Default">
        <name>engine</name>
        <full_name>engine</full_name>
        <docblock line="191">
          <description>Return current TemplateEngine instance.</description>
          <long-description>&lt;p&gt;@return Object&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/View.php</critical>
      <error line="11" code="50018">No DocBlock was found for property $module</error>
      <error line="12" code="50018">No DocBlock was found for property $module_path</error>
      <error line="13" code="50018">No DocBlock was found for property $_engine</error>
      <error line="14" code="50018">No DocBlock was found for property $_template</error>
      <error line="15" code="50018">No DocBlock was found for property $cache_expires</error>
      <error line="16" code="50018">No DocBlock was found for property $expireTime</error>
      <error line="17" code="50018">No DocBlock was found for property $layout</error>
      <error line="18" code="50018">No DocBlock was found for property $_layout_once</error>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <error line="49" code="50015">Argument $param is missing from the Docblock of current()</error>
      <notice line="62" code="50013">Parameter $arg1 could not be found in cache()</notice>
      <error line="106" code="50015">Argument $layout is missing from the Docblock of setLayoutOnce()</error>
      <error line="141" code="50014">Name of argument $fileName does not match with the DocBlock's name $data in load()</error>
      <error line="141" code="50015">Argument $data is missing from the Docblock of load()</error>
      <error line="141" code="50015">Argument $output is missing from the Docblock of load()</error>
      <error line="177" code="50015">Argument $module is missing from the Docblock of template()</error>
    </parse_markers>
  </file>
  <file path="class/Mailer.php" hash="ab3bb5a9e314a399cb25183a5b823219" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends/>
      <name>Mailer</name>
      <full_name>\Mailer</full_name>
      <docblock line="8">
        <description>A simple Mailer class, for sending e-mails.</description>
        <long-description>&lt;p&gt;It is capable to send text or html messages.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$aMail</name>
        <default>array('to' =&gt; array(), 'subject' =&gt; '', 'body' =&gt; '', 'headers' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$files</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="27" package="Default">
        <name>toArray</name>
        <full_name>toArray</full_name>
        <docblock line="23">
          <description>Return Array of data stored on current object Mailer.</description>
          <long-description>&lt;p&gt;@return Array&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="Default">
        <name>charset</name>
        <full_name>charset</full_name>
        <docblock line="31">
          <description>Set current charset of mail, default value 'utf-8'.</description>
          <long-description>&lt;p&gt;@param String $charset&lt;/p&gt;</long-description>
        </docblock>
        <argument line="35">
          <name>$charset</name>
          <default>'UTF-8'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>html</name>
        <full_name>html</full_name>
        <docblock line="39">
          <description>Set if mail is a html message, default value 'false'.</description>
          <long-description>&lt;p&gt;@param boolean $isHtml&lt;/p&gt;</long-description>
        </docblock>
        <argument line="43">
          <name>$isHtml</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="51" package="Default">
        <name>subject</name>
        <full_name>subject</full_name>
        <docblock line="47">
          <description>Set the subject of mail.</description>
          <long-description>&lt;p&gt;@param String $subject&lt;/p&gt;</long-description>
        </docblock>
        <argument line="51">
          <name>$subject</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>body</name>
        <full_name>body</full_name>
        <docblock line="55">
          <description>Set mail body.</description>
          <long-description>&lt;p&gt;@param String $body&lt;/p&gt;</long-description>
        </docblock>
        <argument line="59">
          <name>$body</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Default">
        <name>header</name>
        <full_name>header</full_name>
        <docblock line="63">
          <description>Set headers of mail, like Reply-to, From.</description>
          <long-description>&lt;p&gt;@param String $header&lt;/p&gt;</long-description>
          <tag line="63" name="param" description="" type="String" variable="$value">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$header</name>
          <default></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="80" package="Default">
        <name>to</name>
        <full_name>to</full_name>
        <docblock line="73">
          <description>Set To mail field.</description>
          <long-description>&lt;p&gt;You can use:    to('name', 'email') or to('email')
                  to( Array('reply@domain.com', 'reply@domain2.com', 'Liber' =&gt; 'djalmaoliveira@gmail.com') )&lt;/p&gt;</long-description>
          <tag line="73" name="param" description="@param String $email" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="80">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="80">
          <name>$email</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="101" package="Default">
        <name>addTo</name>
        <full_name>addTo</full_name>
        <docblock line="95">
          <description>Add one or more destinations to mail.</description>
          <long-description>&lt;p&gt;You can use:    addTo('myname@mydomain.com');
                  addTo(Array('myname@mydomain.com', 'othermail@mydomain.com'));&lt;/p&gt;</long-description>
          <tag line="95" name="param" description="| Array $to" type="String" variable="$to">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="101">
          <name>$to</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="117" package="Default">
        <name>from</name>
        <full_name>from</full_name>
        <docblock line="110">
          <description>Set original sender(s) to mail.</description>
          <long-description>&lt;p&gt;You can use:    from('name', 'email') or from('email')
                  from( Array('reply@domain.com', 'reply@domain2.com', 'Liber' =&gt; 'djalmaoliveira@gmail.com') )&lt;/p&gt;</long-description>
          <tag line="110" name="param" description="@param String $email" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="117">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="117">
          <name>$email</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="139" package="Default">
        <name>reply</name>
        <full_name>reply</full_name>
        <docblock line="132">
          <description>Set Reply-To field with email address.</description>
          <long-description>&lt;p&gt;You can use:    reply('name', 'email@domain.com') or reply('email@domain.com')
                  reply( Array('reply@domain.com', 'reply@domain2.com', 'Liber' =&gt; 'djalmaoliveira@gmail.com') )&lt;/p&gt;</long-description>
          <tag line="132" name="param" description="@param String $email" type="String" variable="$name">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="139">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$email</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="160" package="Default">
        <name>file</name>
        <full_name>file</full_name>
        <docblock line="154">
          <description>Add attachment files.</description>
          <long-description>&lt;p&gt;You can use:    file('/path/to/file');
                  file( Array('/path/file1', '/path/file2') );&lt;/p&gt;</long-description>
          <tag line="154" name="param" description="| Array $files" type="String" variable="$files">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="160">
          <name>$files</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="174" package="Default">
        <name>send</name>
        <full_name>send</full_name>
        <docblock line="169">
          <description>Try to deliver the mail to MTA.</description>
          <long-description>&lt;p&gt;Return true if get, or false otherwise.&lt;/p&gt;</long-description>
          <tag line="169" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="238" package="Default">
        <name>_parseAddresses</name>
        <full_name>_parseAddresses</full_name>
        <docblock line="233">
          <description>Parse and return a standard list of mail addresses from Array specified.</description>
          <long-description>&lt;p&gt;@param Array $arr&lt;/p&gt;</long-description>
          <tag line="233" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="238">
          <name>$arr</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Mailer.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $aMail</error>
      <error line="15" code="50018">No DocBlock was found for property $files</error>
      <error line="17" code="50010">No DocBlock was found for method __construct()</error>
      <error line="31" code="50015">Argument $charset is missing from the Docblock of charset()</error>
      <error line="39" code="50015">Argument $isHtml is missing from the Docblock of html()</error>
      <error line="47" code="50015">Argument $subject is missing from the Docblock of subject()</error>
      <error line="55" code="50015">Argument $body is missing from the Docblock of body()</error>
      <error line="63" code="50014">Name of argument $header does not match with the DocBlock's name $value in header()</error>
      <error line="63" code="50015">Argument $value is missing from the Docblock of header()</error>
      <error line="73" code="50015">Argument $email is missing from the Docblock of to()</error>
      <error line="110" code="50015">Argument $email is missing from the Docblock of from()</error>
      <error line="132" code="50015">Argument $email is missing from the Docblock of reply()</error>
      <error line="233" code="50015">Argument $arr is missing from the Docblock of _parseAddresses()</error>
    </parse_markers>
  </file>
  <file path="class/Minify_HTML.php" hash="e1d1c51f9dfe5948887ba2d306adfae9" package="Minify">
    <docblock line="2">
      <description>Class Minify_HTML</description>
      <long-description></long-description>
      <tag line="2" name="package" description="Minify"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="48" package="Minify">
      <extends/>
      <name>Minify_HTML</name>
      <full_name>\Minify_HTML</full_name>
      <docblock line="36">
        <description>Compress HTML</description>
        <long-description>&lt;p&gt;This is a heavy regex-based removal of whitespace, unnecessary comments and
tokens. IE conditional comments are preserved. There are also options to have
STYLE and SCRIPT blocks compressed by callback functions.&lt;/p&gt;

&lt;p&gt;A test suite is available.&lt;/p&gt;</long-description>
        <tag line="36" name="package" description="Minify"/>
        <tag line="36" name="author" description="Stephen Clay &lt;steve@mrclay.org&gt;"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="193" namespace="global" package="Default">
        <name>$_isXhtml</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="194" namespace="global" package="Default">
        <name>$_replacementHash</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="195" namespace="global" package="Default">
        <name>$_placeholders</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="protected" line="196" namespace="global" package="Default">
        <name>$_cssMinifier</name>
        <default>null</default>
      </property>
      <property final="false" static="false" visibility="protected" line="197" namespace="global" package="Default">
        <name>$_jsMinifier</name>
        <default>null</default>
      </property>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="68" package="Minify">
        <name>minify</name>
        <full_name>minify</full_name>
        <docblock line="50">
          <description>"Minify" an HTML page</description>
          <long-description></long-description>
          <tag line="50" name="param" description="" type="string" variable="$html">
            <type by_reference="false">string</type>
          </tag>
          <tag line="50" name="param" description="'cssMinifier' : (optional) callback function to process content of STYLE&#10;elements.&#10;'jsMinifier' : (optional) callback function to process content of SCRIPT&#10;elements. Note: the type attribute is ignored.&#10;'xhtml' : (optional boolean) should content be treated as XHTML1.0? If&#10;unset, minify will sniff for an XHTML doctype." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="50" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="68">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
        <argument line="68">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="92" package="Minify">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="74">
          <description>Create a minifier object</description>
          <long-description></long-description>
          <tag line="74" name="param" description="" type="string" variable="$html">
            <type by_reference="false">string</type>
          </tag>
          <tag line="74" name="param" description="'cssMinifier' : (optional) callback function to process content of STYLE&#10;elements.&#10;'jsMinifier' : (optional) callback function to process content of SCRIPT&#10;elements. Note: the type attribute is ignored.&#10;'xhtml' : (optional boolean) should content be treated as XHTML1.0? If&#10;unset, minify will sniff for an XHTML doctype." type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="74" name="return" description="" type="null">
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="92">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
        <argument line="92">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="112" package="Minify">
        <name>process</name>
        <full_name>process</full_name>
        <docblock line="107">
          <description>Minify the markeup given in the constructor</description>
          <long-description></long-description>
          <tag line="107" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="179" package="Minify">
        <name>_commentCB</name>
        <full_name>_commentCB</full_name>
        <argument line="179">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="186" package="Minify">
        <name>_reservePlace</name>
        <full_name>_reservePlace</full_name>
        <argument line="186">
          <name>$content</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="199" package="Minify">
        <name>_outsideTagCB</name>
        <full_name>_outsideTagCB</full_name>
        <argument line="199">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="204" package="Minify">
        <name>_removePreCB</name>
        <full_name>_removePreCB</full_name>
        <argument line="204">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="209" package="Minify">
        <name>_removeTextareaCB</name>
        <full_name>_removeTextareaCB</full_name>
        <argument line="209">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="214" package="Minify">
        <name>_removeStyleCB</name>
        <full_name>_removeStyleCB</full_name>
        <argument line="214">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="236" package="Minify">
        <name>_removeScriptCB</name>
        <full_name>_removeScriptCB</full_name>
        <argument line="236">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="263" package="Minify">
        <name>_removeCdata</name>
        <full_name>_removeCdata</full_name>
        <argument line="263">
          <name>$str</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="270" package="Minify">
        <name>_needsCdata</name>
        <full_name>_needsCdata</full_name>
        <argument line="270">
          <name>$str</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="193" code="50018">No DocBlock was found for property $_isXhtml</error>
      <error line="194" code="50018">No DocBlock was found for property $_replacementHash</error>
      <error line="195" code="50018">No DocBlock was found for property $_placeholders</error>
      <error line="196" code="50018">No DocBlock was found for property $_cssMinifier</error>
      <error line="197" code="50018">No DocBlock was found for property $_jsMinifier</error>
      <error line="179" code="50010">No DocBlock was found for method _commentCB()</error>
      <error line="186" code="50010">No DocBlock was found for method _reservePlace()</error>
      <error line="199" code="50010">No DocBlock was found for method _outsideTagCB()</error>
      <error line="204" code="50010">No DocBlock was found for method _removePreCB()</error>
      <error line="209" code="50010">No DocBlock was found for method _removeTextareaCB()</error>
      <error line="214" code="50010">No DocBlock was found for method _removeStyleCB()</error>
      <error line="236" code="50010">No DocBlock was found for method _removeScriptCB()</error>
      <error line="263" code="50010">No DocBlock was found for method _removeCdata()</error>
      <error line="270" code="50010">No DocBlock was found for method _needsCdata()</error>
    </parse_markers>
  </file>
  <file path="class/Feed.php" hash="abc9f48164e4c081e4660842ec2fe6ba" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="11" package="Default">
      <extends/>
      <name>Feed</name>
      <full_name>\Feed</full_name>
      <docblock line="7">
        <description>Generic class create feeds.</description>
        <long-description>&lt;p&gt;Supported types: rss2&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="17" namespace="global" package="Default">
        <name>$aFeed</name>
        <default>array('encoding' =&gt; 'utf-8', 'title' =&gt; 'Feed', 'feed_url' =&gt; '', 'description' =&gt; '', 'items' =&gt; array())</default>
        <docblock line="12">
          <description>Default feed fields</description>
          <long-description></long-description>
          <tag line="12" name="var" description="" type="\$aFeed">
            <type by_reference="false">\$aFeed</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="31" namespace="global" package="Default">
        <name>$aItem</name>
        <default>array('title' =&gt; '', 'url' =&gt; '', 'datetime' =&gt; '', 'description' =&gt; '', 'uid' =&gt; '', 'permanent_url' =&gt; '')</default>
        <docblock line="24">
          <description>Default feed item fields.</description>
          <long-description>&lt;p&gt;'uid' is a unique identification of item.
If 'permanent_url' has a real URL, then 'uid' will be replaced by it.
'datetime' field should have 'YYYY-MM-DD HH:II:SS' format.&lt;/p&gt;</long-description>
          <tag line="24" name="var" description="" type="\$aItem">
            <type by_reference="false">\$aItem</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="45" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="40">
          <description>Load data feed.</description>
          <long-description></long-description>
          <tag line="40" name="param" description="" type="Array" variable="$aFeed">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="45">
          <name>$aFeed</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="56" package="Default">
        <name>rss2</name>
        <full_name>rss2</full_name>
        <docblock line="51">
          <description>Return a RSS2 XML code of feed from loaded data.</description>
          <long-description></long-description>
          <tag line="51" name="param" description="- Can be specified a feed content." type="Array" variable="$aFeed">
            <type by_reference="false">Array</type>
          </tag>
          <tag line="51" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="56">
          <name>$aFeed</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="103" package="Default">
        <name>show</name>
        <full_name>show</full_name>
        <docblock line="99">
          <description>Show/print the xml data of type of feed specified, setting the correct header content-type.</description>
          <long-description></long-description>
          <tag line="99" name="param" description="" type="String" variable="$type">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="103">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Feed.php</critical>
    </parse_markers>
  </file>
  <file path="class/Cart.php" hash="426b21398b9087045dcdc169b188679a" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends/>
      <name>Cart</name>
      <full_name>\Cart</full_name>
      <docblock line="7">
        <description>Generic class to manipulates some items like 'shop cart'.</description>
        <long-description>&lt;p&gt;It uses session to store this items.
  Context is like a namespace to separate the stored data.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="14" namespace="global" package="Default">
        <name>$session</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="16" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="16">
          <name>$context</name>
          <default>'defaultCart'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="29" package="Default">
        <name>insert</name>
        <full_name>insert</full_name>
        <docblock line="22">
          <description>Insert a item and return id of it.</description>
          <long-description>&lt;p&gt;If $id specified, $data will be replace current data stored.&lt;/p&gt;</long-description>
          <tag line="22" name="param" description="@param integer $id&#10;  @return integer" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="29">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="52" package="Default">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="44">
          <description>Get a item from cart by a specified $id.</description>
          <long-description>&lt;p&gt;If you specify a $field, it will return the value of it stored on $item.
  If not specified any args, it will return all Array of items.&lt;/p&gt;</long-description>
          <tag line="44" name="param" description="@param String $field&#10;  @return mixed" type="integer" variable="$id">
            <type by_reference="false">integer</type>
          </tag>
        </docblock>
        <argument line="52">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="52">
          <name>$field</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="68" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="64">
          <description>Clear all Cart or specified $id on stored cart.</description>
          <long-description>&lt;p&gt;@param integer $id&lt;/p&gt;</long-description>
        </docblock>
        <argument line="68">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="83" package="Default">
        <name>search</name>
        <full_name>search</full_name>
        <docblock line="77">
          <description>Search if a item exists in cart.</description>
          <long-description>&lt;p&gt;You have to specify a key/value Array to search on cart and will return id of it if matched.&lt;/p&gt;</long-description>
          <tag line="77" name="param" description="@return integer" type="Array" variable="$aSearch">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="83">
          <name>$aSearch</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="102" package="Default">
        <name>getField</name>
        <full_name>getField</full_name>
        <docblock line="95">
          <description>Check and retrieve value of $data from specified $field.</description>
          <long-description>&lt;p&gt;$data must be Array or Object to get it.&lt;/p&gt;</long-description>
          <tag line="95" name="param" description="&lt;Array|Object&gt;&#10;  @param String $field&#10;  @return mixed" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="102">
          <name>$data</name>
          <default></default>
          <type/>
        </argument>
        <argument line="102">
          <name>$field</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Cart.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $session</error>
      <error line="16" code="50010">No DocBlock was found for method __construct()</error>
      <error line="22" code="50015">Argument $id is missing from the Docblock of insert()</error>
      <error line="44" code="50015">Argument $field is missing from the Docblock of get()</error>
      <error line="64" code="50015">Argument $id is missing from the Docblock of clear()</error>
      <error line="95" code="50015">Argument $field is missing from the Docblock of getField()</error>
    </parse_markers>
  </file>
  <file path="class/Minify.php" hash="585bd019462f3c573a2ba206edf6d1bc" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>Minify</name>
      <full_name>\Minify</full_name>
      <docblock line="7">
        <description>Class used to minify HTML, CSS and JavaScript code.</description>
        <long-description></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="17" package="Default">
        <name>css</name>
        <full_name>css</full_name>
        <docblock line="12">
          <description>Minify a CSS code.</description>
          <long-description>&lt;p&gt;@param String $css&lt;/p&gt;</long-description>
          <tag line="12" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="17">
          <name>$css</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="27" package="Default">
        <name>html</name>
        <full_name>html</full_name>
        <docblock line="22">
          <description>Minify a HTML code.</description>
          <long-description>&lt;p&gt;@param String $html&lt;/p&gt;</long-description>
          <tag line="22" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="27">
          <name>$html</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="37" package="Default">
        <name>js</name>
        <full_name>js</full_name>
        <docblock line="32">
          <description>Minify a JavaScript code.</description>
          <long-description>&lt;p&gt;@param String $js&lt;/p&gt;</long-description>
          <tag line="32" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$js</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Minify.php</critical>
      <error line="12" code="50015">Argument $css is missing from the Docblock of css()</error>
      <error line="22" code="50015">Argument $html is missing from the Docblock of html()</error>
      <error line="32" code="50015">Argument $js is missing from the Docblock of js()</error>
    </parse_markers>
  </file>
  <file path="class/Session.php" hash="7f1fd4b81464e20036f7c2e58771d6f0" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends/>
      <name>Session</name>
      <full_name>\Session</full_name>
      <docblock line="7">
        <description>Class that manage values stored in session.</description>
        <long-description>&lt;p&gt;It manage sessions using a context during its creation.
  Context is like a namespace to separate the stored data.&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="public" line="14" namespace="global" package="Default">
        <name>$context</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="public" line="15" namespace="global" package="Default">
        <name>$started</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="17">
          <name>$context</name>
          <default>'default'</default>
          <type/>
        </argument>
        <argument line="17">
          <name>$id</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="35" package="Default">
        <name>val</name>
        <full_name>val</full_name>
        <docblock line="28">
          <description>Set field/value to session.</description>
          <long-description>&lt;p&gt;If don't specified $v, then return the value of $f.&lt;/p&gt;</long-description>
          <tag line="28" name="param" description="- Field Name&#10;  @param mixed $v  - Value&#10;  @return mixed" type="String" variable="$f">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="35">
          <name>$f</name>
          <default></default>
          <type/>
        </argument>
        <argument line="35">
          <name>$v</name>
          <default>NULL</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="49" package="Default">
        <name>toArray</name>
        <full_name>toArray</full_name>
        <docblock line="45">
          <description>Return array of field/values from current session.</description>
          <long-description>&lt;p&gt;@return Array&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="58" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="54">
          <description>Cleans current session.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="66" package="Default">
        <name>destroy</name>
        <full_name>destroy</full_name>
        <docblock line="62">
          <description>Ends current session.</description>
          <long-description></long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Session.php</critical>
      <error line="14" code="50018">No DocBlock was found for property $context</error>
      <error line="15" code="50018">No DocBlock was found for property $started</error>
      <error line="17" code="50010">No DocBlock was found for method __construct()</error>
      <error line="28" code="50015">Argument $v is missing from the Docblock of val()</error>
    </parse_markers>
  </file>
  <file path="class/GlobalTemplate.php" hash="afcd3a969031aa1b96f5d5254252eff2" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>GlobalTemplate</name>
      <full_name>\GlobalTemplate</full_name>
      <docblock line="7">
        <description>Class that manipulates global template system.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$templateFolderName</name>
        <default>'default'</default>
        <docblock line="11">
          <description></description>
          <long-description></long-description>
          <tag line="11" name="var" description="template folder name." type="\Current">
            <type by_reference="false">\Current</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="19" namespace="global" package="Default">
        <name>$modelName</name>
        <default>'default.html'</default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
          <tag line="16" name="var" description="file name of template." type="\Current">
            <type by_reference="false">\Current</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="24" namespace="global" package="Default">
        <name>$contextPath</name>
        <default></default>
        <docblock line="21">
          <description></description>
          <long-description></long-description>
          <tag line="21" name="var" description="context path." type="\Current">
            <type by_reference="false">\Current</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="29" namespace="global" package="Default">
        <name>$module</name>
        <default></default>
        <docblock line="26">
          <description></description>
          <long-description></long-description>
          <tag line="26" name="var" description="module." type="\Current">
            <type by_reference="false">\Current</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="34" namespace="global" package="Default">
        <name>$_view</name>
        <default></default>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag line="31" name="var" description="instance" type="\View">
            <type by_reference="false">\View</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="43" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="37">
          <description>Create a new instance.</description>
          <long-description>&lt;p&gt;If $view specified, then the behaviour of load() method will use this $view instance, else will create a $_view relative to $module specified.&lt;/p&gt;</long-description>
          <tag line="37" name="param" description="@param View $view" type="String" variable="$module">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="43">
          <name>$module</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="43">
          <name>$view</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="61" package="Default">
        <name>context</name>
        <full_name>context</full_name>
        <docblock line="55">
          <description>Set ou Get context path of template.</description>
          <long-description>&lt;p&gt;Can be specified a ModuleName, non value for default application folder or full path.&lt;/p&gt;</long-description>
          <tag line="55" name="param" description="- empty to get&#10;  @return String - Path of current template context" type="String" variable="$context">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$context</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="84" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="76">
          <description>Same functionality of View::load() method, but using current template.</description>
          <long-description>&lt;p&gt;If application set a LAYOUT, then it will check if exists a layout template file.&lt;/p&gt;</long-description>
          <tag line="76" name="param" description="@param Array $aData&#10;  @param boolean $return&#10;  @return mixed &lt;null | String&gt;" type="String" variable="$fileName">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$fileName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="84">
          <name>$aData</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="84">
          <name>$return</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>name</name>
        <full_name>name</full_name>
        <docblock line="119">
          <description>Set or Get the name of template folder on current context.</description>
          <long-description>&lt;p&gt;@param String $name&lt;/p&gt;</long-description>
          <tag line="119" name="return" description="- Current template folder name." type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="124">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="137" package="Default">
        <name>model</name>
        <full_name>model</full_name>
        <docblock line="132">
          <description>Set or Get file name of model name into template folder.</description>
          <long-description>&lt;p&gt;@param String $model&lt;/p&gt;</long-description>
          <tag line="132" name="return" description="- Current file name of model template." type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$model</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/GlobalTemplate.php</critical>
      <error line="37" code="50015">Argument $view is missing from the Docblock of __construct()</error>
      <error line="76" code="50015">Argument $aData is missing from the Docblock of load()</error>
      <error line="76" code="50015">Argument $return is missing from the Docblock of load()</error>
      <error line="119" code="50015">Argument $name is missing from the Docblock of name()</error>
      <error line="132" code="50015">Argument $model is missing from the Docblock of model()</error>
    </parse_markers>
  </file>
  <file path="class/Security.php" hash="8445a5d5c985ba4ebf7838d90e582ead" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>Security</name>
      <full_name>\Security</full_name>
      <docblock line="7">
        <description>Class with some useful method used with security implementations.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="false" visibility="protected" line="12" namespace="global" package="Default">
        <name>$oSession</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="14" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="24" package="Default">
        <name>token</name>
        <full_name>token</full_name>
        <docblock line="19">
          <description>Generate and/or return a token in a current session.</description>
          <long-description>&lt;p&gt;@param boolean $renew&lt;/p&gt;</long-description>
          <tag line="19" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="24">
          <name>$renew</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Default">
        <name>validToken</name>
        <full_name>validToken</full_name>
        <docblock line="31">
          <description>Verify if $token specified is the same in current session.</description>
          <long-description>&lt;p&gt;@param String $token&lt;/p&gt;</long-description>
          <tag line="31" name="return" description="" type="boolean">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$token</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="44" package="Default">
        <name>clientWatch</name>
        <full_name>clientWatch</full_name>
        <docblock line="40">
          <description>Start watching monitor by client.</description>
          <long-description></long-description>
          <tag line="40" name="param" description="- Options that should be verified." type="Array" variable="$options">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="44">
          <name>$options</name>
          <default>array('ip', 'agent')</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="60" package="Default">
        <name>clientChanged</name>
        <full_name>clientChanged</full_name>
        <docblock line="56">
          <description>Return Array of changes detected since clientWatch() method call.</description>
          <long-description></long-description>
          <tag line="56" name="return" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Security.php</critical>
      <error line="12" code="50018">No DocBlock was found for property $oSession</error>
      <error line="14" code="50010">No DocBlock was found for method __construct()</error>
      <error line="19" code="50015">Argument $renew is missing from the Docblock of token()</error>
      <error line="31" code="50015">Argument $token is missing from the Docblock of validToken()</error>
    </parse_markers>
  </file>
  <file path="class/BasicDb.php" hash="747928823c85747d331e03436aa84a4d" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>BasicDb</name>
      <full_name>\BasicDb</full_name>
      <docblock line="6">
        <description>Basic class that manipulates action with a some database
  Should be used as a model for future Database Layers</description>
        <long-description></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="16" package="Default">
        <name>getInstance</name>
        <full_name>getInstance</full_name>
        <docblock line="12">
          <description>Return the instance</description>
          <long-description>&lt;p&gt;@return object PDO&lt;/p&gt;</long-description>
        </docblock>
        <argument line="16">
          <name>$app_mode</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/BasicDb.php</critical>
      <error line="12" code="50015">Argument $app_mode is missing from the Docblock of getInstance()</error>
    </parse_markers>
  </file>
  <file path="class/Http.php" hash="bbb1f186563c295c1d3522a119ebe138" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>Http</name>
      <full_name>\Http</full_name>
      <docblock line="7">
        <description>Class that provide some informations from HTTP request and do some action to HTTP response.</description>
        <long-description></long-description>
      </docblock>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="17" package="Default">
        <name>statusCode</name>
        <full_name>statusCode</full_name>
        <docblock line="12">
          <description>Response a status code header specified.</description>
          <long-description></long-description>
          <tag line="12" name="param" description="" type="integer" variable="$number">
            <type by_reference="false">integer</type>
          </tag>
          <tag line="12" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="17">
          <name>$number</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="37" package="Default">
        <name>contentType</name>
        <full_name>contentType</full_name>
        <docblock line="22">
          <description>Response a content type specified.</description>
          <long-description>&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// by shortcuts:
    Http::contentType( 'xml' );
// by specified content-type:
    Http::contentType( 'application/vnd.ms-excel' );
// charset:
    Http::contentType( 'json', 'utf-16' );
&lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="22" name="param" description="Shortcuts avaliable: pdf, gzip, zip, json, xml, gif, jpeg, png, css, plain, html." type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="param" description="Default: utf-8" type="string" variable="$charset">
            <type by_reference="false">string</type>
          </tag>
          <tag line="22" name="return" description="" type="void">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="37">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="37">
          <name>$charset</name>
          <default>'utf-8'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="71" package="Default">
        <name>ssl</name>
        <full_name>ssl</full_name>
        <docblock line="67">
          <description>Check if is a SSL connection.</description>
          <long-description>&lt;p&gt;@return boolean determined if it is a SSL connection&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="94" package="Default">
        <name>ajax</name>
        <full_name>ajax</full_name>
        <docblock line="90">
          <description>Check if the request is an AJAX request.</description>
          <long-description>&lt;p&gt;@return boolean&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="102" package="Default">
        <name>method</name>
        <full_name>method</full_name>
        <docblock line="98">
          <description>Return the requested method name in lowercase.</description>
          <long-description></long-description>
          <tag line="98" name="return" description="" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="true" visibility="protected" namespace="global" line="114" package="Default">
        <name>clean</name>
        <full_name>clean</full_name>
        <docblock line="110">
          <description>Do a cleaning .</description>
          <long-description>&lt;p&gt;@return  string [description]&lt;/p&gt;</long-description>
        </docblock>
        <argument line="114">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="132" package="Default">
        <name>get</name>
        <full_name>get</full_name>
        <docblock line="120">
          <description>Return a query value sent by method GET from $_GET var.</description>
          <long-description>&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // get a query value
      Http::get('name');
  // indicate if method request is GET
      Http::get();
  &lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="120" name="param" description="@return mixed|boolean" type="String" variable="$field">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="132">
          <name>$field</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="152" package="Default">
        <name>post</name>
        <full_name>post</full_name>
        <docblock line="140">
          <description>Return a post value sent by method POST from $_POST var.</description>
          <long-description>&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // get a post value
      Http::post('name');
  // indicate if method request is POST
      Http::post();
  &lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="140" name="param" description="@return mixed|boolean" type="String" variable="$field">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="152">
          <name>$field</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="172" package="Default">
        <name>cookie</name>
        <full_name>cookie</full_name>
        <docblock line="160">
          <description>Return a identified index from $_COOKIE var.</description>
          <long-description>&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // get a cookie value
      Http::cookie('name');
  // indicate if there are cookie values
      Http::cookie();
  &lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="160" name="param" description="@return mixed|boolean" type="String" variable="$field">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="172">
          <name>$field</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="192" package="Default">
        <name>file</name>
        <full_name>file</full_name>
        <docblock line="180">
          <description>Return a specifield uploaded file from $_FILES var.</description>
          <long-description>&lt;p&gt;Usage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  // get a file uploaded
      Http::file('name');
  // indicate if there are file uploaded
      Http::file();
  &lt;/code&gt;&lt;/pre&gt;</long-description>
          <tag line="180" name="param" description="@return mixed|boolean" type="String" variable="$field">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="192">
          <name>$field</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/Http.php</critical>
      <error line="110" code="50015">Argument $value is missing from the Docblock of clean()</error>
    </parse_markers>
  </file>
  <file path="class/Validation.php" hash="f13648fc3bea2be0e4c88ce0c8bf2fd8" package="core\class">
    <docblock line="3">
      <description></description>
      <long-description></long-description>
      <tag line="3" name="package" description="core.class"/>
    </docblock>
    <include line="36" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="13" package="Default">
      <extends/>
      <name>Validation</name>
      <full_name>\Validation</full_name>
      <docblock line="8">
        <description>Class that manipulates several kind of values validation.</description>
        <long-description></long-description>
      </docblock>
      <constant namespace="global" line="15" package="Default">
        <name>NOTNULL</name>
        <full_name>NOTNULL</full_name>
        <value>1</value>
      </constant>
      <constant namespace="global" line="17" package="Default">
        <name>NUMERIC</name>
        <full_name>NUMERIC</full_name>
        <value>2</value>
      </constant>
      <constant namespace="global" line="19" package="Default">
        <name>EMAIL</name>
        <full_name>EMAIL</full_name>
        <value>4</value>
      </constant>
      <constant namespace="global" line="21" package="Default">
        <name>DATE</name>
        <full_name>DATE</full_name>
        <value>8</value>
      </constant>
      <constant namespace="global" line="23" package="Default">
        <name>URL</name>
        <full_name>URL</full_name>
        <value>16</value>
      </constant>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="32" package="Default">
        <name>validate</name>
        <full_name>validate</full_name>
        <docblock line="25">
          <description>Validates a $value by specified $type.</description>
          <long-description>&lt;p&gt;Return Array of errors matched.&lt;/p&gt;</long-description>
          <tag line="25" name="param" description="@param integer $type - See Validation Constants&#10;  @return Array." type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="32">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
        <argument line="32">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file class/Validation.php</critical>
      <error line="25" code="50015">Argument $type is missing from the Docblock of validate()</error>
    </parse_markers>
  </file>
  <file path="class/SqlExtract.php" hash="03525e04093e3d62f8529b88fb06f651" package="core\class">
    <docblock line="3">
      <description></description>
      <long-description></long-description>
      <tag line="3" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="12" package="Default">
      <extends/>
      <name>SqlExtract</name>
      <full_name>\SqlExtract</full_name>
      <docblock line="8">
        <description>Class that manipulates extraction from databases.</description>
        <long-description>&lt;p&gt;Current suport: MySQL&lt;/p&gt;</long-description>
      </docblock>
      <property final="false" static="false" visibility="private" line="13" namespace="global" package="Default">
        <name>$db_app_mode</name>
        <default>''</default>
      </property>
      <property final="false" static="false" visibility="private" line="14" namespace="global" package="Default">
        <name>$_tb_status</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="private" line="15" namespace="global" package="Default">
        <name>$db</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="17" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="17">
          <name>$db_app_mode</name>
          <default>'PROD'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Default">
        <name>tableScheme</name>
        <full_name>tableScheme</full_name>
        <docblock line="30">
          <description>Return the SQL code of table creation.</description>
          <long-description>&lt;p&gt;Return Array of tables names with its SQL code.&lt;/p&gt;</long-description>
          <tag line="30" name="param" description="| Array $tables&#10;  @return Array" type="String" variable="$tables">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$tables</name>
          <default></default>
          <type/>
        </argument>
        <argument line="36">
          <name>$withoutKeys</name>
          <default>true</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="72" package="Default">
        <name>viewScheme</name>
        <full_name>viewScheme</full_name>
        <docblock line="66">
          <description>Return the SQL code of view creation specified.</description>
          <long-description>&lt;p&gt;Return Array of view names with its SQL code.&lt;/p&gt;</long-description>
          <tag line="66" name="param" description="| Array $views&#10;  @return Array" type="String" variable="$views">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$views</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="99" package="Default">
        <name>tableConstraints</name>
        <full_name>tableConstraints</full_name>
        <docblock line="94">
          <description>Return the constraints(PRIMARY and FOREIGN KEYS) of $tables specified.</description>
          <long-description>&lt;p&gt;@param String | Array $tables&lt;/p&gt;</long-description>
          <tag line="94" name="return" description="" type="Array">
            <type by_reference="false">Array</type>
          </tag>
        </docblock>
        <argument line="99">
          <name>$tables</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="131" package="Default">
        <name>tableData</name>
        <full_name>tableData</full_name>
        <docblock line="120">
          <description>Return an array of SQL Insert code of each data retrieved from $tables specified, by table name.</description>
          <long-description>&lt;p&gt;If specified $destFolder, each table data will be written on a file like 'tableName.sql' on this folder and return the path to this file instead of data.
  Remember that you have to remove the files written after its use.
  Usage:  -&gt;tableData('customer'); // return Array('customer'=&gt;'INSERT ...');
          -&gt;tableData('customer', '/home/user/sql/'); // written on '/home/user/sql/customer.sql'
          -&gt;tableData('customer', 'temp/'); // written on 'APP_PATH/temp/customer.sql'&lt;/p&gt;</long-description>
          <tag line="120" name="param" description="| Array $tables&#10;  @param String $destFolder&#10;  @return Array" type="String" variable="$tables">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="131">
          <name>$tables</name>
          <default></default>
          <type/>
        </argument>
        <argument line="131">
          <name>$destFolder</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="global" line="188" package="Default">
        <name>isTable</name>
        <full_name>isTable</full_name>
        <docblock line="182">
          <description>Return if $table is table or not.</description>
          <long-description>&lt;p&gt;The entity $table can be a view.&lt;/p&gt;</long-description>
          <tag line="182" name="param" description="@return boolean" type="String" variable="$table">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$table</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file class/SqlExtract.php</critical>
      <error line="13" code="50018">No DocBlock was found for property $db_app_mode</error>
      <error line="14" code="50018">No DocBlock was found for property $_tb_status</error>
      <error line="15" code="50018">No DocBlock was found for property $db</error>
      <error line="17" code="50010">No DocBlock was found for method __construct()</error>
      <error line="30" code="50015">Argument $withoutKeys is missing from the Docblock of tableScheme()</error>
      <error line="94" code="50015">Argument $tables is missing from the Docblock of tableConstraints()</error>
      <error line="120" code="50015">Argument $destFolder is missing from the Docblock of tableData()</error>
    </parse_markers>
  </file>
  <file path="class/JSMinPlus.php" hash="a9d2aac581ce7ad567e651a9dd9351d6" package="Default">
    <constant namespace="global" line="62" package="Default">
      <name>TOKEN_END</name>
      <full_name>\TOKEN_END</full_name>
      <value>1</value>
    </constant>
    <constant namespace="global" line="63" package="Default">
      <name>TOKEN_NUMBER</name>
      <full_name>\TOKEN_NUMBER</full_name>
      <value>2</value>
    </constant>
    <constant namespace="global" line="64" package="Default">
      <name>TOKEN_IDENTIFIER</name>
      <full_name>\TOKEN_IDENTIFIER</full_name>
      <value>3</value>
    </constant>
    <constant namespace="global" line="65" package="Default">
      <name>TOKEN_STRING</name>
      <full_name>\TOKEN_STRING</full_name>
      <value>4</value>
    </constant>
    <constant namespace="global" line="66" package="Default">
      <name>TOKEN_REGEXP</name>
      <full_name>\TOKEN_REGEXP</full_name>
      <value>5</value>
    </constant>
    <constant namespace="global" line="67" package="Default">
      <name>TOKEN_NEWLINE</name>
      <full_name>\TOKEN_NEWLINE</full_name>
      <value>6</value>
    </constant>
    <constant namespace="global" line="68" package="Default">
      <name>TOKEN_CONDCOMMENT_MULTILINE</name>
      <full_name>\TOKEN_CONDCOMMENT_MULTILINE</full_name>
      <value>7</value>
    </constant>
    <constant namespace="global" line="70" package="Default">
      <name>JS_SCRIPT</name>
      <full_name>\JS_SCRIPT</full_name>
      <value>100</value>
    </constant>
    <constant namespace="global" line="71" package="Default">
      <name>JS_BLOCK</name>
      <full_name>\JS_BLOCK</full_name>
      <value>101</value>
    </constant>
    <constant namespace="global" line="72" package="Default">
      <name>JS_LABEL</name>
      <full_name>\JS_LABEL</full_name>
      <value>102</value>
    </constant>
    <constant namespace="global" line="73" package="Default">
      <name>JS_FOR_IN</name>
      <full_name>\JS_FOR_IN</full_name>
      <value>103</value>
    </constant>
    <constant namespace="global" line="74" package="Default">
      <name>JS_CALL</name>
      <full_name>\JS_CALL</full_name>
      <value>104</value>
    </constant>
    <constant namespace="global" line="75" package="Default">
      <name>JS_NEW_WITH_ARGS</name>
      <full_name>\JS_NEW_WITH_ARGS</full_name>
      <value>105</value>
    </constant>
    <constant namespace="global" line="76" package="Default">
      <name>JS_INDEX</name>
      <full_name>\JS_INDEX</full_name>
      <value>106</value>
    </constant>
    <constant namespace="global" line="77" package="Default">
      <name>JS_ARRAY_INIT</name>
      <full_name>\JS_ARRAY_INIT</full_name>
      <value>107</value>
    </constant>
    <constant namespace="global" line="78" package="Default">
      <name>JS_OBJECT_INIT</name>
      <full_name>\JS_OBJECT_INIT</full_name>
      <value>108</value>
    </constant>
    <constant namespace="global" line="79" package="Default">
      <name>JS_PROPERTY_INIT</name>
      <full_name>\JS_PROPERTY_INIT</full_name>
      <value>109</value>
    </constant>
    <constant namespace="global" line="80" package="Default">
      <name>JS_GETTER</name>
      <full_name>\JS_GETTER</full_name>
      <value>110</value>
    </constant>
    <constant namespace="global" line="81" package="Default">
      <name>JS_SETTER</name>
      <full_name>\JS_SETTER</full_name>
      <value>111</value>
    </constant>
    <constant namespace="global" line="82" package="Default">
      <name>JS_GROUP</name>
      <full_name>\JS_GROUP</full_name>
      <value>112</value>
    </constant>
    <constant namespace="global" line="83" package="Default">
      <name>JS_LIST</name>
      <full_name>\JS_LIST</full_name>
      <value>113</value>
    </constant>
    <constant namespace="global" line="85" package="Default">
      <name>DECLARED_FORM</name>
      <full_name>\DECLARED_FORM</full_name>
      <value>0</value>
    </constant>
    <constant namespace="global" line="86" package="Default">
      <name>EXPRESSED_FORM</name>
      <full_name>\EXPRESSED_FORM</full_name>
      <value>1</value>
    </constant>
    <constant namespace="global" line="87" package="Default">
      <name>STATEMENT_FORM</name>
      <full_name>\STATEMENT_FORM</full_name>
      <value>2</value>
    </constant>
    <constant namespace="global" line="1551" package="Default">
      <name>OP_' . $name</name>
      <full_name>\OP_' . $name</full_name>
      <value>$operand</value>
    </constant>
    <constant namespace="global" line="1553" package="Default">
      <name>OP_UNARY_PLUS</name>
      <full_name>\OP_UNARY_PLUS</full_name>
      <value>'U+'</value>
    </constant>
    <constant namespace="global" line="1554" package="Default">
      <name>OP_UNARY_MINUS</name>
      <full_name>\OP_UNARY_MINUS</full_name>
      <value>'U-'</value>
    </constant>
    <constant namespace="global" line="1557" package="Default">
      <name>KEYWORD_' . strtoupper($keyword)</name>
      <full_name>\KEYWORD_' . strtoupper($keyword)</full_name>
      <value>$keyword</value>
    </constant>
    <class final="false" abstract="false" namespace="global" line="89" package="Default">
      <extends/>
      <name>JSMinPlus</name>
      <full_name>\JSMinPlus</full_name>
      <property final="false" static="false" visibility="private" line="91" namespace="global" package="Default">
        <name>$parser</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="92" namespace="global" package="Default">
        <name>$reserved</name>
        <default>array('break', 'case', 'catch', 'continue', 'default', 'delete', 'do', 'else', 'finally', 'for', 'function', 'if', 'in', 'instanceof', 'new', 'return', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while', 'with', 'abstract', 'boolean', 'byte', 'char', 'class', 'const', 'debugger', 'double', 'enum', 'export', 'extends', 'final', 'float', 'goto', 'implements', 'import', 'int', 'interface', 'long', 'native', 'package', 'private', 'protected', 'public', 'short', 'static', 'super', 'synchronized', 'throws', 'transient', 'volatile', 'arguments', 'eval', 'true', 'false', 'Infinity', 'NaN', 'null', 'undefined')</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="108" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="global" line="113" package="Default">
        <name>minify</name>
        <full_name>minify</full_name>
        <argument line="113">
          <name>$js</name>
          <default></default>
          <type/>
        </argument>
        <argument line="113">
          <name>$filename</name>
          <default>''</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="124" package="Default">
        <name>min</name>
        <full_name>min</full_name>
        <argument line="124">
          <name>$js</name>
          <default></default>
          <type/>
        </argument>
        <argument line="124">
          <name>$filename</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="139" package="Default">
        <name>parseTree</name>
        <full_name>parseTree</full_name>
        <argument line="139">
          <name>$n</name>
          <default></default>
          <type/>
        </argument>
        <argument line="139">
          <name>$noBlockGrouping</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="471" package="Default">
        <name>isValidIdentifier</name>
        <full_name>isValidIdentifier</full_name>
        <argument line="471">
          <name>$string</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="477" package="Default">
      <extends/>
      <name>JSParser</name>
      <full_name>\JSParser</full_name>
      <property final="false" static="false" visibility="private" line="479" namespace="global" package="Default">
        <name>$t</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="481" namespace="global" package="Default">
        <name>$opPrecedence</name>
        <default>array(';' =&gt; 0, ',' =&gt; 1, '=' =&gt; 2, '?' =&gt; 2, ':' =&gt; 2, '||' =&gt; 4, '&amp;&amp;' =&gt; 5, '|' =&gt; 6, '^' =&gt; 7, '&amp;' =&gt; 8, '==' =&gt; 9, '!=' =&gt; 9, '===' =&gt; 9, '!==' =&gt; 9, '&lt;' =&gt; 10, '&lt;=' =&gt; 10, '&gt;=' =&gt; 10, '&gt;' =&gt; 10, 'in' =&gt; 10, 'instanceof' =&gt; 10, '&lt;&lt;' =&gt; 11, '&gt;&gt;' =&gt; 11, '&gt;&gt;&gt;' =&gt; 11, '+' =&gt; 12, '-' =&gt; 12, '*' =&gt; 13, '/' =&gt; 13, '%' =&gt; 13, 'delete' =&gt; 14, 'void' =&gt; 14, 'typeof' =&gt; 14, '!' =&gt; 14, '~' =&gt; 14, 'U+' =&gt; 14, 'U-' =&gt; 14, '++' =&gt; 15, '--' =&gt; 15, 'new' =&gt; 16, '.' =&gt; 17, JS_NEW_WITH_ARGS =&gt; 0, JS_INDEX =&gt; 0, JS_CALL =&gt; 0, JS_ARRAY_INIT =&gt; 0, JS_OBJECT_INIT =&gt; 0, JS_GROUP =&gt; 0)</default>
      </property>
      <property final="false" static="false" visibility="private" line="505" namespace="global" package="Default">
        <name>$opArity</name>
        <default>array(',' =&gt; -2, '=' =&gt; 2, '?' =&gt; 3, '||' =&gt; 2, '&amp;&amp;' =&gt; 2, '|' =&gt; 2, '^' =&gt; 2, '&amp;' =&gt; 2, '==' =&gt; 2, '!=' =&gt; 2, '===' =&gt; 2, '!==' =&gt; 2, '&lt;' =&gt; 2, '&lt;=' =&gt; 2, '&gt;=' =&gt; 2, '&gt;' =&gt; 2, 'in' =&gt; 2, 'instanceof' =&gt; 2, '&lt;&lt;' =&gt; 2, '&gt;&gt;' =&gt; 2, '&gt;&gt;&gt;' =&gt; 2, '+' =&gt; 2, '-' =&gt; 2, '*' =&gt; 2, '/' =&gt; 2, '%' =&gt; 2, 'delete' =&gt; 1, 'void' =&gt; 1, 'typeof' =&gt; 1, '!' =&gt; 1, '~' =&gt; 1, 'U+' =&gt; 1, 'U-' =&gt; 1, '++' =&gt; 1, '--' =&gt; 1, 'new' =&gt; 1, '.' =&gt; 2, JS_NEW_WITH_ARGS =&gt; 2, JS_INDEX =&gt; 2, JS_CALL =&gt; 2, JS_ARRAY_INIT =&gt; 1, JS_OBJECT_INIT =&gt; 1, JS_GROUP =&gt; 1, TOKEN_CONDCOMMENT_MULTILINE =&gt; 1)</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="529" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="534" package="Default">
        <name>parse</name>
        <full_name>parse</full_name>
        <argument line="534">
          <name>$s</name>
          <default></default>
          <type/>
        </argument>
        <argument line="534">
          <name>$f</name>
          <default></default>
          <type/>
        </argument>
        <argument line="534">
          <name>$l</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="547" package="Default">
        <name>Script</name>
        <full_name>Script</full_name>
        <argument line="547">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="557" package="Default">
        <name>Statements</name>
        <full_name>Statements</full_name>
        <argument line="557">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="570" package="Default">
        <name>Block</name>
        <full_name>Block</full_name>
        <argument line="570">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="579" package="Default">
        <name>Statement</name>
        <full_name>Statement</full_name>
        <argument line="579">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="896" package="Default">
        <name>FunctionDefinition</name>
        <full_name>FunctionDefinition</full_name>
        <argument line="896">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
        <argument line="896">
          <name>$requireName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="896">
          <name>$functionForm</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="937" package="Default">
        <name>Variables</name>
        <full_name>Variables</full_name>
        <argument line="937">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="966" package="Default">
        <name>Expression</name>
        <full_name>Expression</full_name>
        <argument line="966">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
        <argument line="966">
          <name>$stop</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="1336" package="Default">
        <name>ParenExpression</name>
        <full_name>ParenExpression</full_name>
        <argument line="1336">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="1346" package="Default">
        <name>nest</name>
        <full_name>nest</full_name>
        <argument line="1346">
          <name>$x</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1346">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1346">
          <name>$end</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="1358" package="Default">
        <name>reduce</name>
        <full_name>reduce</full_name>
        <argument line="1358">
          <name>$operators</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1358">
          <name>$operands</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1396" package="Default">
      <extends/>
      <name>JSCompilerContext</name>
      <full_name>\JSCompilerContext</full_name>
      <property final="false" static="false" visibility="public" line="1398" namespace="global" package="Default">
        <name>$inFunction</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="public" line="1399" namespace="global" package="Default">
        <name>$inForLoopInit</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="public" line="1400" namespace="global" package="Default">
        <name>$ecmaStrictMode</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="public" line="1401" namespace="global" package="Default">
        <name>$bracketLevel</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="public" line="1402" namespace="global" package="Default">
        <name>$curlyLevel</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="public" line="1403" namespace="global" package="Default">
        <name>$parenLevel</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="public" line="1404" namespace="global" package="Default">
        <name>$hookLevel</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="public" line="1406" namespace="global" package="Default">
        <name>$stmtStack</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="1407" namespace="global" package="Default">
        <name>$funDecls</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="1408" namespace="global" package="Default">
        <name>$varDecls</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1410" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="1410">
          <name>$inFunction</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1416" package="Default">
      <extends/>
      <name>JSNode</name>
      <full_name>\JSNode</full_name>
      <property final="false" static="false" visibility="private" line="1418" namespace="global" package="Default">
        <name>$type</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1419" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1420" namespace="global" package="Default">
        <name>$lineno</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1421" namespace="global" package="Default">
        <name>$start</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1422" namespace="global" package="Default">
        <name>$end</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1424" namespace="global" package="Default">
        <name>$treeNodes</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="1425" namespace="global" package="Default">
        <name>$funDecls</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="1426" namespace="global" package="Default">
        <name>$varDecls</name>
        <default>array()</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1428" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="1428">
          <name>$t</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1428">
          <name>$type</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1453" package="Default">
        <name>__set</name>
        <full_name>__set</full_name>
        <argument line="1453">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1453">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1458" package="Default">
        <name>__get</name>
        <full_name>__get</full_name>
        <argument line="1458">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1466" package="Default">
        <name>addNode</name>
        <full_name>addNode</full_name>
        <argument line="1466">
          <name>$node</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1472" package="Default">
      <extends/>
      <name>JSTokenizer</name>
      <full_name>\JSTokenizer</full_name>
      <property final="false" static="false" visibility="private" line="1474" namespace="global" package="Default">
        <name>$cursor</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="private" line="1475" namespace="global" package="Default">
        <name>$source</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1477" namespace="global" package="Default">
        <name>$tokens</name>
        <default>array()</default>
      </property>
      <property final="false" static="false" visibility="public" line="1478" namespace="global" package="Default">
        <name>$tokenIndex</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="public" line="1479" namespace="global" package="Default">
        <name>$lookahead</name>
        <default>0</default>
      </property>
      <property final="false" static="false" visibility="public" line="1480" namespace="global" package="Default">
        <name>$scanNewlines</name>
        <default>false</default>
      </property>
      <property final="false" static="false" visibility="public" line="1481" namespace="global" package="Default">
        <name>$scanOperand</name>
        <default>true</default>
      </property>
      <property final="false" static="false" visibility="public" line="1483" namespace="global" package="Default">
        <name>$filename</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1484" namespace="global" package="Default">
        <name>$lineno</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="private" line="1486" namespace="global" package="Default">
        <name>$keywords</name>
        <default>array('break', 'case', 'catch', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'false', 'finally', 'for', 'function', 'if', 'in', 'instanceof', 'new', 'null', 'return', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with')</default>
      </property>
      <property final="false" static="false" visibility="private" line="1501" namespace="global" package="Default">
        <name>$opTypeNames</name>
        <default>array(';' =&gt; 'SEMICOLON', ',' =&gt; 'COMMA', '?' =&gt; 'HOOK', ':' =&gt; 'COLON', '||' =&gt; 'OR', '&amp;&amp;' =&gt; 'AND', '|' =&gt; 'BITWISE_OR', '^' =&gt; 'BITWISE_XOR', '&amp;' =&gt; 'BITWISE_AND', '===' =&gt; 'STRICT_EQ', '==' =&gt; 'EQ', '=' =&gt; 'ASSIGN', '!==' =&gt; 'STRICT_NE', '!=' =&gt; 'NE', '&lt;&lt;' =&gt; 'LSH', '&lt;=' =&gt; 'LE', '&lt;' =&gt; 'LT', '&gt;&gt;&gt;' =&gt; 'URSH', '&gt;&gt;' =&gt; 'RSH', '&gt;=' =&gt; 'GE', '&gt;' =&gt; 'GT', '++' =&gt; 'INCREMENT', '--' =&gt; 'DECREMENT', '+' =&gt; 'PLUS', '-' =&gt; 'MINUS', '*' =&gt; 'MUL', '/' =&gt; 'DIV', '%' =&gt; 'MOD', '!' =&gt; 'NOT', '~' =&gt; 'BITWISE_NOT', '.' =&gt; 'DOT', '[' =&gt; 'LEFT_BRACKET', ']' =&gt; 'RIGHT_BRACKET', '{' =&gt; 'LEFT_CURLY', '}' =&gt; 'RIGHT_CURLY', '(' =&gt; 'LEFT_PAREN', ')' =&gt; 'RIGHT_PAREN', '@*/' =&gt; 'CONDCOMMENT_END')</default>
      </property>
      <property final="false" static="false" visibility="private" line="1542" namespace="global" package="Default">
        <name>$assignOps</name>
        <default>array('|', '^', '&amp;', '&lt;&lt;', '&gt;&gt;', '&gt;&gt;&gt;', '+', '-', '*', '/', '%')</default>
      </property>
      <property final="false" static="false" visibility="private" line="1543" namespace="global" package="Default">
        <name>$opRegExp</name>
        <default></default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1545" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1560" package="Default">
        <name>init</name>
        <full_name>init</full_name>
        <argument line="1560">
          <name>$source</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1560">
          <name>$filename</name>
          <default>''</default>
          <type/>
        </argument>
        <argument line="1560">
          <name>$lineno</name>
          <default>1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1574" package="Default">
        <name>getInput</name>
        <full_name>getInput</full_name>
        <argument line="1574">
          <name>$chunksize</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1582" package="Default">
        <name>isDone</name>
        <full_name>isDone</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1587" package="Default">
        <name>match</name>
        <full_name>match</full_name>
        <argument line="1587">
          <name>$tt</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1592" package="Default">
        <name>mustMatch</name>
        <full_name>mustMatch</full_name>
        <argument line="1592">
          <name>$tt</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1600" package="Default">
        <name>peek</name>
        <full_name>peek</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1619" package="Default">
        <name>peekOnSameLine</name>
        <full_name>peekOnSameLine</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1628" package="Default">
        <name>currentToken</name>
        <full_name>currentToken</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1634" package="Default">
        <name>get</name>
        <full_name>get</full_name>
        <argument line="1634">
          <name>$chunksize</name>
          <default>1000</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1848" package="Default">
        <name>unget</name>
        <full_name>unget</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="1856" package="Default">
        <name>newSyntaxError</name>
        <full_name>newSyntaxError</full_name>
        <argument line="1856">
          <name>$m</name>
          <default></default>
          <type/>
        </argument>
      </method>
    </class>
    <class final="false" abstract="false" namespace="global" line="1862" package="Default">
      <extends/>
      <name>JSToken</name>
      <full_name>\JSToken</full_name>
      <property final="false" static="false" visibility="public" line="1864" namespace="global" package="Default">
        <name>$type</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1865" namespace="global" package="Default">
        <name>$value</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1866" namespace="global" package="Default">
        <name>$start</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1867" namespace="global" package="Default">
        <name>$end</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1868" namespace="global" package="Default">
        <name>$lineno</name>
        <default></default>
      </property>
      <property final="false" static="false" visibility="public" line="1869" namespace="global" package="Default">
        <name>$assignOp</name>
        <default></default>
      </property>
    </class>
    <markers>
      <fixme line="1816">add support for unicode and unicode escape sequence \uHHHH</fixme>
    </markers>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file class/JSMinPlus.php</error>
      <error line="89" code="50000">No DocBlock was found for \JSMinPlus</error>
      <error line="91" code="50018">No DocBlock was found for property $parser</error>
      <error line="92" code="50018">No DocBlock was found for property $reserved</error>
      <error line="108" code="50010">No DocBlock was found for method __construct()</error>
      <error line="113" code="50010">No DocBlock was found for method minify()</error>
      <error line="124" code="50010">No DocBlock was found for method min()</error>
      <error line="139" code="50010">No DocBlock was found for method parseTree()</error>
      <error line="471" code="50010">No DocBlock was found for method isValidIdentifier()</error>
      <error line="477" code="50000">No DocBlock was found for \JSParser</error>
      <error line="479" code="50018">No DocBlock was found for property $t</error>
      <error line="481" code="50018">No DocBlock was found for property $opPrecedence</error>
      <error line="505" code="50018">No DocBlock was found for property $opArity</error>
      <error line="529" code="50010">No DocBlock was found for method __construct()</error>
      <error line="534" code="50010">No DocBlock was found for method parse()</error>
      <error line="547" code="50010">No DocBlock was found for method Script()</error>
      <error line="557" code="50010">No DocBlock was found for method Statements()</error>
      <error line="570" code="50010">No DocBlock was found for method Block()</error>
      <error line="579" code="50010">No DocBlock was found for method Statement()</error>
      <error line="896" code="50010">No DocBlock was found for method FunctionDefinition()</error>
      <error line="937" code="50010">No DocBlock was found for method Variables()</error>
      <error line="966" code="50010">No DocBlock was found for method Expression()</error>
      <error line="1336" code="50010">No DocBlock was found for method ParenExpression()</error>
      <error line="1346" code="50010">No DocBlock was found for method nest()</error>
      <error line="1358" code="50010">No DocBlock was found for method reduce()</error>
      <error line="1396" code="50000">No DocBlock was found for \JSCompilerContext</error>
      <error line="1398" code="50018">No DocBlock was found for property $inFunction</error>
      <error line="1399" code="50018">No DocBlock was found for property $inForLoopInit</error>
      <error line="1400" code="50018">No DocBlock was found for property $ecmaStrictMode</error>
      <error line="1401" code="50018">No DocBlock was found for property $bracketLevel</error>
      <error line="1402" code="50018">No DocBlock was found for property $curlyLevel</error>
      <error line="1403" code="50018">No DocBlock was found for property $parenLevel</error>
      <error line="1404" code="50018">No DocBlock was found for property $hookLevel</error>
      <error line="1406" code="50018">No DocBlock was found for property $stmtStack</error>
      <error line="1407" code="50018">No DocBlock was found for property $funDecls</error>
      <error line="1408" code="50018">No DocBlock was found for property $varDecls</error>
      <error line="1410" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1416" code="50000">No DocBlock was found for \JSNode</error>
      <error line="1418" code="50018">No DocBlock was found for property $type</error>
      <error line="1419" code="50018">No DocBlock was found for property $value</error>
      <error line="1420" code="50018">No DocBlock was found for property $lineno</error>
      <error line="1421" code="50018">No DocBlock was found for property $start</error>
      <error line="1422" code="50018">No DocBlock was found for property $end</error>
      <error line="1424" code="50018">No DocBlock was found for property $treeNodes</error>
      <error line="1425" code="50018">No DocBlock was found for property $funDecls</error>
      <error line="1426" code="50018">No DocBlock was found for property $varDecls</error>
      <error line="1428" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1453" code="50010">No DocBlock was found for method __set()</error>
      <error line="1458" code="50010">No DocBlock was found for method __get()</error>
      <error line="1466" code="50010">No DocBlock was found for method addNode()</error>
      <error line="1472" code="50000">No DocBlock was found for \JSTokenizer</error>
      <error line="1474" code="50018">No DocBlock was found for property $cursor</error>
      <error line="1475" code="50018">No DocBlock was found for property $source</error>
      <error line="1477" code="50018">No DocBlock was found for property $tokens</error>
      <error line="1478" code="50018">No DocBlock was found for property $tokenIndex</error>
      <error line="1479" code="50018">No DocBlock was found for property $lookahead</error>
      <error line="1480" code="50018">No DocBlock was found for property $scanNewlines</error>
      <error line="1481" code="50018">No DocBlock was found for property $scanOperand</error>
      <error line="1483" code="50018">No DocBlock was found for property $filename</error>
      <error line="1484" code="50018">No DocBlock was found for property $lineno</error>
      <error line="1486" code="50018">No DocBlock was found for property $keywords</error>
      <error line="1501" code="50018">No DocBlock was found for property $opTypeNames</error>
      <error line="1542" code="50018">No DocBlock was found for property $assignOps</error>
      <error line="1543" code="50018">No DocBlock was found for property $opRegExp</error>
      <error line="1545" code="50010">No DocBlock was found for method __construct()</error>
      <error line="1560" code="50010">No DocBlock was found for method init()</error>
      <error line="1574" code="50010">No DocBlock was found for method getInput()</error>
      <error line="1582" code="50010">No DocBlock was found for method isDone()</error>
      <error line="1587" code="50010">No DocBlock was found for method match()</error>
      <error line="1592" code="50010">No DocBlock was found for method mustMatch()</error>
      <error line="1600" code="50010">No DocBlock was found for method peek()</error>
      <error line="1619" code="50010">No DocBlock was found for method peekOnSameLine()</error>
      <error line="1628" code="50010">No DocBlock was found for method currentToken()</error>
      <error line="1634" code="50010">No DocBlock was found for method get()</error>
      <error line="1848" code="50010">No DocBlock was found for method unget()</error>
      <error line="1856" code="50010">No DocBlock was found for method newSyntaxError()</error>
      <error line="1862" code="50000">No DocBlock was found for \JSToken</error>
      <error line="1864" code="50018">No DocBlock was found for property $type</error>
      <error line="1865" code="50018">No DocBlock was found for property $value</error>
      <error line="1866" code="50018">No DocBlock was found for property $start</error>
      <error line="1867" code="50018">No DocBlock was found for property $end</error>
      <error line="1868" code="50018">No DocBlock was found for property $lineno</error>
      <error line="1869" code="50018">No DocBlock was found for property $assignOp</error>
    </parse_markers>
  </file>
  <file path="class/Log.php" hash="c24b0f64c10936624c66eff6d479b5f7" package="core\class">
    <docblock line="3">
      <description></description>
      <long-description></long-description>
      <tag line="3" name="package" description="core.class"/>
    </docblock>
    <class final="false" abstract="false" namespace="global" line="11" package="Default">
      <extends/>
      <name>Log</name>
      <full_name>\Log</full_name>
      <docblock line="8">
        <description>Class that manipulate produced logs in general.</description>
        <long-description></long-description>
      </docblock>
      <property final="false" static="true" visibility="public" line="13" namespace="global" package="Default">
        <name>$aLogMsg</name>
        <default>array()</default>
      </property>
      <property final="false" static="true" visibility="public" line="14" namespace="global" package="Default">
        <name>$aLogAll</name>
        <default>array()</default>
      </property>
      <property final="false" static="true" visibility="public" line="15" namespace="global" package="Default">
        <name>$debug</name>
        <default>true</default>
      </property>
      <property final="false" static="true" visibility="private" line="16" namespace="global" package="Default">
        <name>$handler</name>
        <default>''</default>
      </property>
      <property final="false" static="true" visibility="private" line="17" namespace="global" package="Default">
        <name>$instanced</name>
        <default></default>
      </property>
      <property final="false" static="true" visibility="private" line="18" namespace="global" package="Default">
        <name>$error</name>
        <default>false</default>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="20" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="36" package="Default">
        <name>handlerLog</name>
        <full_name>handlerLog</full_name>
        <docblock line="30">
          <description>Do the last action with log messages stored.</description>
          <long-description>&lt;p&gt;The default on error behavior is:   DEV     =&gt; open a popup window showing actual information about error and enviroment.
                                      PROD    =&gt; call to SYS_ERROR controller defined.
  Both APP_MODE write a file on /log folder with the pattern [yyyymmdd.log].&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="59" package="Default">
        <name>handler</name>
        <full_name>handler</full_name>
        <docblock line="54">
          <description>Set a handler function to control the behavior of log messages.</description>
          <long-description>&lt;p&gt;The behavior of this function will be called before the default behavior, if you don't want the default behavior, then call die() or exit on $func.&lt;/p&gt;</long-description>
          <tag line="54" name="param" description="- a function" type="String" variable="$func">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="59">
          <name>$func</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="69" package="Default">
        <name>handlerError</name>
        <full_name>handlerError</full_name>
        <docblock line="66">
          <description>Add a log message from current error triggered.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" namespace="global" line="86" package="Default">
        <name>profile</name>
        <full_name>profile</full_name>
        <docblock line="81">
          <description>Return a String of current error and enviroment information.</description>
          <long-description>&lt;p&gt;@param Array $context - Error context&lt;/p&gt;</long-description>
          <tag line="81" name="return" description="" type="String">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="86">
          <name>$context</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="109" package="Default">
        <name>add</name>
        <full_name>add</full_name>
        <docblock line="104">
          <description>Adds a message log.</description>
          <long-description>&lt;p&gt;@param String $msg&lt;/p&gt;</long-description>
          <tag line="104" name="param" description="- NameSpace to log like 'ERROR', 'URGENT', etc" type="String" variable="$level">
            <type by_reference="false">String</type>
          </tag>
        </docblock>
        <argument line="109">
          <name>$msg</name>
          <default></default>
          <type/>
        </argument>
        <argument line="109">
          <name>$level</name>
          <default>'info'</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="124" package="Default">
        <name>toFile</name>
        <full_name>toFile</full_name>
        <docblock line="120">
          <description>Write current log to file.</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="145" package="Default">
        <name>toString</name>
        <full_name>toString</full_name>
        <docblock line="141">
          <description>Return textual stored log.</description>
          <long-description>&lt;p&gt;@return String&lt;/p&gt;</long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="154" package="Default">
        <name>toPopUp</name>
        <full_name>toPopUp</full_name>
        <docblock line="150">
          <description>Generate a html content to show a popup with PHP error.</description>
          <long-description>&lt;p&gt;@return String&lt;/p&gt;</long-description>
        </docblock>
      </method>
    </class>
    <parse_markers>
      <critical line="3" code="50008">No short description for file class/Log.php</critical>
      <error line="13" code="50018">No DocBlock was found for property $aLogMsg</error>
      <error line="14" code="50018">No DocBlock was found for property $aLogAll</error>
      <error line="15" code="50018">No DocBlock was found for property $debug</error>
      <error line="16" code="50018">No DocBlock was found for property $handler</error>
      <error line="17" code="50018">No DocBlock was found for property $instanced</error>
      <error line="18" code="50018">No DocBlock was found for property $error</error>
      <error line="20" code="50010">No DocBlock was found for method __construct()</error>
      <error line="81" code="50015">Argument $context is missing from the Docblock of profile()</error>
      <error line="104" code="50014">Name of argument $msg does not match with the DocBlock's name $level in add()</error>
      <error line="104" code="50015">Argument $level is missing from the Docblock of add()</error>
    </parse_markers>
  </file>
  <file path="class/TemplateEngine.php" hash="3bda90b8186998396f6c5f6f736d2a0e" package="core\class">
    <docblock line="2">
      <description></description>
      <long-description></long-description>
      <tag line="2" name="package" description="core.class"/>
    </docblock>
    <include line="26" type="Include" package="Default">
      <name/>
    </include>
    <class final="false" abstract="false" namespace="global" line="10" package="Default">
      <extends/>
      <name>TemplateEngine</name>
      <full_name>\TemplateEngine</full_name>
      <docblock line="7">
        <description>Class base from others Template Engines classes.</description>
        <long-description></long-description>
      </docblock>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="12" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="12">
          <name>$aSettings</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="global" line="23" package="Default">
        <name>load</name>
        <full_name>load</full_name>
        <docblock line="16">
          <description>Load and parse a template from file.</description>
          <long-description>&lt;p&gt;@param String $fileName&lt;/p&gt;</long-description>
          <tag line="16" name="param" description="@param boolean $output -  true, return a processed data, default false.&#10;  @return String" type="mixed" variable="$data">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="23">
          <name>$fileName</name>
          <default></default>
          <type/>
        </argument>
        <argument line="23">
          <name>$data</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="23">
          <name>$output</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
    </class>
    <parse_markers>
      <critical line="2" code="50008">No short description for file class/TemplateEngine.php</critical>
      <error line="12" code="50010">No DocBlock was found for method __construct()</error>
      <error line="16" code="50014">Name of argument $fileName does not match with the DocBlock's name $data in load()</error>
      <error line="16" code="50015">Argument $data is missing from the Docblock of load()</error>
      <error line="16" code="50015">Argument $output is missing from the Docblock of load()</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="Minify" full_name="Minify"/>
  <package name="cache" full_name="cache"/>
  <package name="core" full_name="core">
    <package name="class" full_name="core\class"/>
    <package name="helpers" full_name="core\helpers"/>
  </package>
  <namespace name="global" full_name="global"/>
  <marker count="0">todo</marker>
  <marker count="1">fixme</marker>
  <deprecated count="0"/>
</project>
